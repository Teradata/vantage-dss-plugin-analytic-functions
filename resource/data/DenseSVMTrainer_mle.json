{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "DenseSVMTrainer",
  "function_version": "1.5",
  "function_type": "driver",
  "function_alias_name": "SVMDense",
  "function_r_name": "aa.svm.dense.train",
  "short_description": "This function trains a SVM model according to the training set iteratively. ",
  "long_description": "This function is used to train a linear/non-linear SVM model for dense input data.  The training is an iterative process controlled by the paramters.  We may choose from linear kernel or non-linear kernels: polynomial, radial basis function (rbf) and sigmoid; we may also choose to project the attributes to a hash space or explictly record all the attributes as a list during the training.",
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Name of the table containing the training samples. Each row consists of a sample_id, a set of attribute values, and a corresponding label. ",
      "description": "Name of the table containing the training samples. Each row consists of a sample_id, a set of attribute values, and a corresponding label. ",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "ModelTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Name for the model table that the function will create.",
      "description": "Specify the name of the model table (which must not exist).",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "model.table",
      "useInR": true,
      "rOrderNum": 100
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "DISTRIBUTIONTYPE"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "IdColumn",
      "alternateNames": [
        "SampleIdColumn"
      ],
      "isRequired": true,
      "rDescription": "Name of the column in the data that contains the identifier of the training samples.",
      "description": "Specify the name of the column in the input table that contains the identifiers of the training samples.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "sample.id.column",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "InputColumns",
      "alternateNames": [
        "AttributeColumns"
      ],
      "isRequired": true,
      "rDescription": "Specifies all the attribute columns. Attribute columns must have a numeric value.",
      "description": "Specify the names of the input columns that contain the attributes, which must have numeric data types.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "attribute.columns",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "STRING",
        "INTEGER"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ResponseColumn",
      "alternateNames": [
        "LabelColumn"
      ],
      "isRequired": true,
      "rDescription": "Column that identifies the class of the corresponding sample. Must be an integer or a string.",
      "description": "Specify the name of the input table column that contains the class identifiers of the samples. The response_column must have an integer or string data type.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "label.column",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "permittedValues": [
        "LINEAR",
        "POLYNOMIAL",
        "RBF",
        "SIGMOID"
      ],
      "defaultValue": "LINEAR",
      "isOutputColumn": false,
      "name": "KernelFunction",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Possible values are linear, polynomial, RBF, or sigmoid. The distribution exponential family used to compute the hash function. \u2022 For linear, a Pegasos algorithm is used to solve the linear SVM. \u2022 For polynomial, RBF, or sigmoid, a Hash-SVM algorithm is used. Each sample is represented by compact hash bits, over which an inner product is defined to serve as the surrogate of the original nonlinear kernels. The default value is linear. ",
      "description": " Specify the kernel function that the SVMDense function uses to compute the hash function: Option Description 'linear' (Default) SVMDense uses a Pegasos algorithm to solve linear SVM. 'polynomial' SVMDense uses a Hash-SVM algorithm. Formula for polynomial: \u03b3( u T v + c ) d When SVMDense uses a Hash-SVM algorithm, each sample is represented by compact hash bits, over which an inner product is defined to serve as the surrogate of the original nonlinear kernels. 'rfb' SVMDense uses a Hash-SVM algorithm. Formula for RBF: exp (-\u03b3 * | | x - x' | | 2 ) 'sigmoid' SVMDense uses a Hash-SVM algorithm. Formula for sigmoid: tanh (\u03b3 * u T v + c )",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "kernel.function",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "defaultValue": 1.0,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Gamma",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Only used when kernel.function is polynomial, RBF, or sigmoid. A positive double that specifies . The minimum value is 0.0. The default value is 1.0. ",
      "description": " Use only when KernelFunction is 'polynomial', 'RBF', or 'sigmoid'. Specify \u03b3 in the formula. The gamma must be a positive DOUBLE value. Default: 1.0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "gamma",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 1.0,
      "lowerBound": -Infinity,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Constant",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Only used when kernel.function is polynomial or sigmoid. A double value that specifies c. If kernel.function is polynomial, the minimum value is 0.0. The default value is 1.0.",
      "description": " Use only when KernelFunction is 'polynomial' or 'sigmoid'. Specify c in the formula. The c must be a DOUBLE value. If KernelFunction is polynomial, the minimum c value is 0.0. Default: 1.0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "constant",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": 2,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "degree",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Only used when kernel.function is polynomial. A positive integer that specifies the degree (d) of the polynomial kernel. The input value must be greater than 0. The default value is 2.",
      "description": " Use only when KernelFunction is 'polynomial'. Specify d in the formula. The d must be a positive INTEGER. Default: 2",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "degree",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "defaultValue": 256,
      "lowerBound": 0,
      "upperBound": 2048,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "SubspaceDimension",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Only valid if kernel is polynomial, RBF, or sigmoid. A positive integer that specifies the random subspace dimension of the basis matrix V obtained by the Gram-Schmidt process. Since the Gram-Schmidt process cannot be parallelized, this dimension cannot be too large. Accuracy will increase with higher values of this number, but computation costs will also increase. The input value must be in the range [1, 2048]. The default value is 256.",
      "description": " Use only when KernelFunction is 'polynomial' or 'sigmoid'. Specify the random subspace dimension of the basis matrix V obtained by the Gram-Schmidt process. The subspace_dimension must be in the range [1, 2048]. Because the Gram-Schmidt process cannot be parallelized, this dimension cannot be too large. Accuracy increases with higher subspace_dimension values, but computation costs also increase. Default: 256",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "subspace.dimension",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": 256,
      "lowerBound": 8,
      "upperBound": 8192,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "HashBits",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Only valid if kernel is polynomial, RBF, or sigmoid. A positive integer specifying the number of compact hash bits used to represent a data point. Accuracy will increase with higher values of this number, but computation costs will also increase. The input value must be in the range [8, 8192]. The default value is 256.",
      "description": " Use only when KernelFunction is 'polynomial', 'RBF', or 'sigmoid'. Specify the number of compact hash bits that represent a data point. The hash_bits must be in the range [8, 8192]. Accuracy increases with higher hash_bits values, but computation costs also increase. Default: 256",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "hash.bits",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "defaultValue": 1,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Cost",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The regularization parameter in the SVM soft-margin loss function : Must be greater than 0.0. The default value is 1.0.",
      "description": " Specify the regularization parameter \u03bb in the SVM soft-margin loss function: The cost must be greater than 0.0. Default: 1.0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "cost",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Bias",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "A non-negative value. If the value is greater than zero, each sample (x) in the training set will be converted to ( x, b); that is, it will add another dimension containing the bias value b. This argument addresses situations where not all samples center at 0. The default value is 0.0.",
      "description": " Specify whether to add another dimension containing the bias value b . The bias must be nonnegative. If bias is greater than 0, the function converts each sample in the training set to ( , b). Use this argument when not all samples center at 0. Default: 0.0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "bias",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ClassWeights",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the weights for different classes. The format should be: \u201cclasslabel m:weight m, classlabel n:weight n\u201d. If weight for a class is given, the cost parameter for this class will be weight * cost. A weight larger than 1 often increases the accuracy of the corresponding class; however, it may decrease global accuracy. Classes not assigned a weight in this argument will be assigned a weight of 1.0.",
      "description": " Specify the weights for different classes. If you specify a weight for a class , the cost parameter for that class is weight * cost . A weight larger than 1 often increases the accuracy of class ; however, it may decrease global accuracy. Default behavior: The function assigns weight 1.0 to any class not assigned a weight in this argument.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "class.weights",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "defaultValue": 100,
      "lowerBound": 0,
      "upperBound": 10000,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxStep",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "A positive integer value that specifies the maximum number of iterations of the training process. One step means that each sample is seen once by the trainer. The input value must be in the range (0, 10000]. The default value is 100.",
      "description": " Specify the maximum number of steps of the training process. One step means that the trainer sees each sample once. The max_step must be in the range (0, 10000]. Default: 100",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.step",
      "useInR": true,
      "rOrderNum": 14
    },
    {
      "defaultValue": 0.01,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Epsilon",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Termination criterion. When the difference between the values of the loss function in two sequential iterations is less than this number, the function stops. Must be greater than 0.0. The default value is 0.01.",
      "description": " Specify the termination criterion: When the difference between the values of the loss function in two sequential iterations is less than this epsilon , the function stops. The epsilon must be greater than 0.0. Default: 0.01",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "epsilon",
      "useInR": true,
      "rOrderNum": 15
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "EXCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "A long integer value used to order the training set randomly and consistently. This value can be used to ensure that the same model will be generated if the function is run multiple times in a given database with the same arguments. The input value must be in the range [0, 9223372036854775807]. The default value is 0. ",
      "description": " Specify the random seed the algorithm uses for repeatable results (for more information, see Nondeterministic Results). The algorithm uses the seed to order the training set randomly and consistently. The seed must be a nonnegative LONG value. Default: 0",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 16
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SequenceInputBy",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}