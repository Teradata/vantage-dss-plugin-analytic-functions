{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "nPath",
  "function_version": "1.1",
  "function_type": "non-driver",
  "function_alias_name": "nPath",
  "function_r_name": "aa.npath",
  "short_description": "The nPath function matches specified patterns in a sequence of rows from one or more input tables and extracts information from the matched rows.",
  "long_description": "The nPath function scans a set of rows, looking for patterns that you specify. For each set of input rows that matches the pattern, nPath produces a single output row. The function provides a flexible pattern-matching capability that lets you specify complex patterns in the input data and define the values that are output for each matched input set. nPath is useful when your goal is to identify the paths that lead to an outcome. For example, you can use nPath to analyze: Web site click data, to identify paths that lead to sales over a specified amount Sensor data from industrial processes, to identify paths to poor product quality Healthcare records of individual patients, to identify paths that indicate that patients are at risk of developing conditions such as heart disease or diabetes Financial data for individuals, to identify paths that provide information about credit or fraud risks The output from the nPath function can be input to other ML Engine functions or to a visualization tool such as Teradata AppCenter. An nPath call specifies: Mode (overlapping or nonoverlapping) Pattern to match Symbols to use [Optional] Filters to apply Results to output",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "parameter",
            "name": "Result.*",
            "dataType": "unchanged",
            "manipulations": []
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input1"
      ],
      "isRequired": true,
      "rDescription": "Input table",
      "description": "Input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data1",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input2"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data2",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input3"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data3",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input4"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data4",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input5"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data5",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input6"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data6",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input7"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data7",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input8"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data8",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input9"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data9",
      "useInR": true,
      "rOrderNum": 14
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [
        "input10"
      ],
      "isRequired": false,
      "rDescription": "Additional optional input table",
      "description": "Additional optional input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data10",
      "useInR": true,
      "rOrderNum": 15
    }
  ],
  "argument_clauses": [
    {
      "permittedValues": [
        "OVERLAPPING",
        "NONOVERLAPPING"
      ],
      "isOutputColumn": false,
      "name": "Mode",
      "alternateNames": [],
      "rDescription": "Specifies the pattern-matching mode: \n OVERLAPPING: The function finds every occurrence of the pattern in the partition, regardless of  whether it is part of a previously found match. Therefore, one row can match multiple symbols in a  given matched pattern. \n NONOVERLAPPING: The function begins the next pattern search at the row that follows the last  pattern match. This is the default behavior of many commonly used pattern matching utilities, including the UNIX grep utility.",
      "description": "Specify the pattern-matching mode: Option Description OVERLAPPING Find every occurrence of pattern in partition, regardless of whether it is part of a previously found match. One row can match multiple symbols in a given matched pattern. NONOVERLAPPING Start next pattern search at row that follows last pattern match.",
      "datatype": "STRING",
      "allowsLists": false,
      "isRequired": true,
      "rName": "mode",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Pattern",
      "alternateNames": [],
      "rDescription": "Specifies the pattern for which the function searches. You compose pattern with the symbols that you define in the symbols argument, operators, and parentheses. Table describes the simplest patterns, which you can combine to form more complex patterns. When patterns have multiple operators, the function applies them in order of precedence, and applies operators of equal precedence from left to right. Table also shows operator precedence. To force the function to evaluate a subpattern first, enclose it in parentheses. To specify that a subpattern must appear a specific number of times, use the \u201cRange-Matching Feature\u201d.\n For pattern matching details, refer to \u201cPattern Matching\u201d.",
      "description": "Specify the pattern for which the function searches. You compose pattern with the symbols (which you define in the Symbols argument), operators, and parentheses. When patterns have multiple operators, the function applies them in order of precedence, and applies operators of equal precedence from left to right. To force the function to evaluate a subpattern first, enclose it in parentheses. For more information, see nPath Patterns.",
      "datatype": "STRING",
      "allowsLists": false,
      "isRequired": true,
      "rName": "pattern",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Symbols",
      "alternateNames": [],
      "rDescription": "Defines the symbols that appear in the values of the pattern and result arguments. The col_expr is an expression whose value is a column name, symbol is any valid identifier, and  symbol_predicate is a SQL predicate (often a column name).\n For example, the Symbols argument for analyzing website visits might look like this: \nsymbols \n(\n pagetype = 'homepage' AS H, \npagetype <> 'homepage' AND  pagetype <> 'checkout' AS PP,\n pagetype = 'checkout' AS CO \n)\n The symbol is case-insensitive; however, a symbol of one or two uppercase letters is easy to identify in patterns. \nIf col_expr represents a column that appears in multiple input tables, then you must qualify the ambiguous column name with its table name. For example: \n Symbols \n ( \n weblog.pagetype = 'homepage' AS H, \n weblog.pagetype = 'thankyou' AS T, \n ads.adname = 'xmaspromo' AS X, \n ads.adname = 'realtorpromo' AS R \n) \nFor more information about symbols that appear in the Pattern argument value, refer to \u201csymbols\u201d. For more information about symbols that appear in the Result argument value, refer to \u201cresult: Applying Aggregate Functions\u201d.",
      "description": "Specify the symbols that appear in the values of the Pattern and Result arguments. The col_expr is an expression whose value is a column name, symbol is any valid identifier, and symbol_predicate is a SQL predicate (often a column name). For example, this Symbols argument is for analyzing website visits: The symbol is case-insensitive; however, a symbol of one or two uppercase letters is easy to identify in patterns. If col_expr represents a column that appears in multiple input tables, you must qualify the ambiguous column name with its table name. For example: For more information about symbols that appear in the Pattern argument value, see nPath Symbols. For more information about symbols that appear in the Result argument value, see nPath Results.",
      "datatype": "SQLEXPR",
      "isRequired": true,
      "allowsLists": true,
      "rName": "symbols",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Filter",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies filters to impose on the matched rows. The function combines the filter expressions using the AND operator. \nThe filter_expression syntax is: \nsymbol_expression  comparison_operator symbol_expression \nThe two symbol expressions must be type-compatible. The symbol_expression syntax is: \n{ FIRST | LAST }(column_with_expression OF [ANY](symbol[,...])) \nThe column_with_expression cannot contain the operator AND or OR, and all its columns must come from the same input. If the function has multiple inputs, then column_with_expression and symbol must come from the same input. \nThe comparison_operator is either <, >, <=, >=, =, or !=. \nThis argument can improve or degrade ta.npath performance, depending on several factors. For details, refer to \u201cfilters\u201d",
      "description": " Specify filters to impose on the matched rows. The function combines the filter expressions using the AND operator. This is the filter_expression syntax: symbol_expression comparison_operator symbol_expression The two symbol expressions must be type-compatible. This is the symbol_expression syntax: column_with_expression OF [ANY]( symbol [,...])) The column_with_expression cannot contain the operator AND or OR, and all its columns must come from the same input. If the function has multiple inputs, column_with_expression and symbol must come from the same input. The comparison_operator is either < , > , <= , >= , = , or != . Whether this argument improves or degrades nPath performance depends on several factors. For details, see nPath Filters.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "filter",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "isOutputColumn": true,
      "name": "Result",
      "alternateNames": [],
      "rDescription": "Defines the output columns. The col_expr is an expression whose value is a column name; it specifies the values to retrieve from the matched rows. The function applies aggregate_function  to these values. For details, see \u201cresult: Applying Aggregate Functions\u201d. \nThe function evaluates this argument once for every matched pattern in the partition (that is, it outputs one row for each pattern match).",
      "description": "Specify the output columns. The col_expr is an expression whose value is a column name; it specifies the values to retrieve from the matched rows. The function applies aggregate_function to these values. For details, see nPath Results. The function evaluates this argument once for every matched pattern in the partition (that is, it outputs one row for each pattern match).",
      "datatype": "SQLEXPR",
      "isRequired": true,
      "allowsLists": true,
      "rName": "result",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}