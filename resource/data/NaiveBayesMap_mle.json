{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "NaiveBayesMap",
  "function_version": "1.8",
  "function_type": "non-driver",
  "function_alias_name": "NaiveBayesMap",
  "function_r_name": "aa.naivebayes.train",
  "short_description": "Map phase of naive Bayes model training.",
  "long_description": "Trains a Naive Bayes classifier on a dense matrix of training data.",
  "function_operation": "map",
  "partner_function": "NaiveBayesReduce",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "predefined",
            "name": "task_index",
            "dataType": "integer",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "class_nb",
            "dataType": "varchar(128)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "variable_nb",
            "dataType": "varchar(128)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "type_nb",
            "dataType": "varchar(128)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "category",
            "dataType": "varchar(32)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "cnt",
            "dataType": "bigint",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "sum_nb",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "sum_sq",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "total_cnt",
            "dataType": "bigint",
            "manipulations": []
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByAny"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "This table defining the input training data.",
      "description": "This table defining the input training data.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 0
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "INTEGER",
        "STRING"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ResponseColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the response variable, passed as text.",
      "description": "Specify the name of the input table column that contains the response variable, passed as text.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "response.column",
      "useInR": true,
      "rOrderNum": 0
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": false,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "INTEGER",
        "STRING"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoricalInputs",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies input table columns that contain categorical values to be included in the model. The syntax of categorical_input_columns is the same as the syntax of numeric_input_columns.",
      "description": "[Required if NumericInputs is omitted.] Specify input table columns that contain categorical values to include in the model. The syntax of categorical_input_columns is the same as the syntax of numeric_input_columns . Note: For information about columns that you must identify as categorical, see Identification of Categorical Columns.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "categorical.inputs",
      "useInR": true,
      "rOrderNum": 0
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": false,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NumericInputs",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies input table columns that contain numeric values to be included in the model. The syntax of numeric_input_columns is: {'column_name [,...]' | '[start_column:end_column]'}[,...] For example: 'input1','[4:21]','[25:53]','input73, input80', '[25:53]' The first column index is 0.",
      "description": "[Required if CategoricalInputs is omitted.] Specify input table columns that contain numeric values to include in the model. This is the syntax of numeric_input_columns : column_name [,...]' | '[ start_column : end_column ]'}[,...] For example: The first column index is 0.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "numeric.inputs",
      "useInR": true,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}