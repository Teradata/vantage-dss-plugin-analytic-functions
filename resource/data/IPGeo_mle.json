{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "IPGeo",
  "function_version": "2.4",
  "function_type": "non-driver",
  "function_alias_name": "IPGeo",
  "function_r_name": "aa.ipgeo",
  "short_description": "SQL/MR function to convert ip address to geolocation information.",
  "long_description": "IPGeo lets you map IP addresses to location information (country, region, city, latitude, longitude, ZIP code, and ISP). You can use the locations of web site visitors to improve the effectiveness of online applications. For example: Targeted online advertising Content localization Geographic rights management Enhanced analytics Online security and fraud prevention For general information about IP databases, see: http://dev.maxmind.com/geoip/geoip2/geolite2/",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByAny"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The input table contains the ip addresses.",
      "description": "The input table contains the ip addresses.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "IpAddressColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the IP addresses.",
      "description": "Specify the name of the input table column that contains the IP addresses.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "ipaddress.column",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of input table columns to copy to the output table.",
      "description": " Specify the names of input table columns to copy to the output table.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "requiredLength": 2,
      "matchLengthOfArgument": "",
      "allowPadding": false,
      "name": "Converter",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The JAR filename and the name of the class that converts the IP address to location information. The JAR file must be installed on the Aster Database and the class name must be the full name, which includes the package information. The file and class parameters are case-sensitive. The ta.ipgeo function is a special case and needs a user-defined class. This is why you need to use the converter argument. Only the JAR file declared by this argument can be used by the function. The JAR file should contain all the classes needed by the user-defined converter. In Aster Database, all of the installed files are stored in the database. When a function is invoked, only a ZIP/JAR file consistent with the SQL-MapReduce function name is temporally downloaded to the file system to be executed. ",
      "description": " Specify the JAR filename and the name of the class that converts the IP address to location information. Note: The ML Engine does not support the creation of new Converter classes. However, it does support existing JAR files\u2014for installation instructions, see Teradata \u00ae Vantage User Guide , B700-4002. The JAR file must be installed on the ML Engine and the class name must be the full name, including the package information. The file and class parameters are case-sensitive. The JAR file must contain all the classes that the user-defined converter needs. Default: Converter class that ships with IPGeo function (geolite 1.2.8)",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "converter",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SequenceInputBy",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}