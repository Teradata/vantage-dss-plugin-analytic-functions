{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "JSONParser",
  "function_version": "1.11",
  "function_type": "SQL-MR",
  "function_alias_name": "JSONParser",
  "function_r_name": "aa.json.parser",
  "short_description": "Parses JSON string and produces a flattened table.",
  "long_description": "The JSONParser function extracts the element name and text from a JSON string and outputs an equivalent relational table.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByAny"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Input table that contains JSON data",
      "description": "Input table that contains JSON data",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "STRING"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TextColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the column name from the input table which contains the JSON string.",
      "description": "Specify the name of the input table column that contains the JSON string.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "text.column",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the input table columns to copy to the output table.",
      "description": " Specify the names of the input table columns to copy to the output table.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Nodes",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the parent/children pair. Should contain at least one parent/child pair, and all pairs specified must be in the same format. Multiple children can be specified as parent/{child1,child2,...}.",
      "description": "Specify the parent/child pairs. All pairs must have the same format. You can specify a parent with multiple children with this syntax: parent_node /{ child_node [,\u2026]} JSON has two format types for arrays: Array Format Type Nodes Argument parent:[key:value,key:value] 'parent/key' parent[value,value] 'parent/parent' Root sometimes has a key:value pair, as in JSONParser Example 2: Default Values. To get the value of such a pair, use Nodes argument '/key'.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "nodes",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SearchPath",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the path to find the direct value of the child. To reach the parent of the parent, include the parent of the parent in this path. When a path to the parent of the parent is supplied, all the siblings of the parent can be printed by including them in the nodes argument. If anything from root is to be parsed, then supply this argument as '/' (or leave it as an empty string).",
      "description": " Specify the path to find the direct value of the child. To reach the grandparent, include it in this path. When you include the path to the grandparent, you can output all siblings of the parent by including them in the Nodes argument. If anything from root is to be parsed, represent it as either '/' or an empty string. Default behavior: The function does not output the direct values of the children.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "search.path",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [],
      "defaultValue": ",",
      "isOutputColumn": false,
      "name": "Delimiter",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the delimiter used to separate multiple child values with the same name and which have the same parent node in the JSON String. If not defined, defaults to comma ','. Note: The delimiter cannot include '#'",
      "description": " Specify the delimiter that separates multiple children with the same name and the same parent node in the JSON String. Note: The delimiter cannot include '#'. Default: ',' (comma)",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "delimiter",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 10,
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxItemNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The maximum number of nodes with the same name that will be displayed in the output. The default value is 10.",
      "description": " Specify the maximum number of nodes with the same name to display in the output. Default: 10",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.item.num",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "defaultValue": "out_nodeid",
      "isOutputColumn": true,
      "name": "NodeIdOutputColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " The name of the column to use in the result schema to contain the identifier (from the input table) of the each node extracted. If not defined, defaults to 'out_nodeid'.",
      "description": " Specify the name of the column to use in the result schema to contain the identifier (from the input table) of the each node extracted. Default: 'out_nodeid'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "nodeid.output.column",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "defaultValue": "out_parent_node",
      "isOutputColumn": true,
      "name": "ParentNodeOutputColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The name of column to use in the result schema to contain the tag name of the parent node extracted. If not defined, defaults to 'out_parent_node'.",
      "description": " Specify the name of column to use in the result schema to contain the tag name of the parent node extracted. Default: 'out_parent_node'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "parentnode.output.column",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "ErrorHandler",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies how the function acts when it encounters a data problem. If not specified, the function aborts if the input table contains bad data (for example, invalid UTF-8 characters). ErrorHandler lets you specify an \u201cadditional\u201d column to hold any rows that were rejected as having bad data, also referred to as the output column, in the output table. The log information in the additional column lets you easily identify which input table row contains unexpected data. There are two parameters you can pass to error.handler: The first parameter tells the function whether to continue processing if bad data is encountered. 'true' means continue the processing without aborting. 'false' means abort the process when an error occurs, The second group of parameters designates the output and input columns. The parameters in this group, output_col_name: input_col_name1, input_col_name2, input_col_name3,... are optional. If you specify an output column, it will be added to the output, and bad rows are logged there. If you do not specify output_col_name, the function uses \u201cERROR_HANDLER\u201d as the name of the output column. The error output column includes the data from the input columns specified using input_col_namex, when an error occurs. The data inserted into the output column will be merged from input columns and delimited by column using a semicolon. Using error.handler('true') without specifying input columns does not add any data to the output column.",
      "description": " Specify whether the function continues processing when the input table has bad data (for example, invalid UTF-8 characters) and adds an error column to the output table. Default: 'false'. (The function aborts.) The name of the error column is output_column . Default: ERROR_HANDLER The error column contains the data from each specified input_column , separated by semicolons. If you specify no input_column , the error column is empty.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "error.handler",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}