{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "GlmL1L2",
  "function_version": "1.5",
  "function_type": "driver",
  "function_alias_name": "GLML1L2",
  "function_r_name": "aa.glml1l2",
  "short_description": "The GlmL1L2 function supports the regularization models ridge, lasso and elastic net.",
  "long_description": "The GlmL1L2 function supports the regularization models ridge, lasso and elastic net.",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "predefined",
            "name": "attribute",
            "dataType": "varchar",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "category",
            "dataType": "varchar",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "estimate",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "information",
            "dataType": "varchar",
            "manipulations": []
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the table that contains the columns described in the table in Input.",
      "description": "Specifies the name of the table that contains the columns described in the table in Input.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "input.table",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "FactorTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifing the output table will output factorized table based on the argument specified in either Randomization or CategoricalColumns. Then in the future, the table can be used as the input table without the need of performing randomization or categorical-to-numerical conversion again.",
      "description": "Specifing the output table will output factorized table based on the argument specified in either Randomization or CategoricalColumns. Then in the future, the table can be used as the input table without the need of performing randomization or categorical-to-numerical conversion again.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "factor.table",
      "useInR": true,
      "rOrderNum": 1,
      "outputSchema": {
        "property": "outputSchema",
        "outputId": "FactorTable",
        "instructions": [
          {
            "instruction": "ADD",
            "placement": "end",
            "arguments": [
              {
                "source": "parameter",
                "name": "FeatureColumns.*",
                "dataType": "unchanged",
                "manipulations": []
              },
              {
                "source": "parameter",
                "name": "ResponseColumn.*",
                "dataType": "double precision",
                "manipulations": []
              },
              {
                "source": "inputTable",
                "name": "InputTable.PartitionBy.*",
                "dataType": "unchanged",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "td_randomized_id",
                "dataType": "integer",
                "manipulations": []
              }
            ]
          }
        ]
      }
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "FeatureColumns",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the input table columns that contain the variables to use as predictors (independent variables).",
      "description": "Specifies the names of the input_table columns that contain the variables to use as predictors (independent variables).",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "feature.columns",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -1
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ResponseColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the responses.",
      "description": "Specifies the name of the input_table column that contains the responses.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "response.column",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": 0
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "STRING",
        "INTEGER"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoricalColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the input table columns that contain the categorical values.",
      "description": "Specifies the names of the input table columns that contain the categorical values.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "categorical.columns",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -2
    },
    {
      "defaultValue": 0.0,
      "lowerBound": 0,
      "upperBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Alpha",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specify whether to use Lasso, Ridge or Elastic Net. If the value is 0, Ridge is used. If the value is 1, Lasso is used. If any value in between, Elastic Net is applied. ",
      "description": "Specify whether to use Lasso, Ridge or Elastic Net. If the value is 0, Ridge is used. If the value is 1, Lasso is used.  If any value in between, Elastic Net is applied. ",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "alpha",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Lambda",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Disallowed if num.lambdas is specified. Specifies the regularization parameter sequence. Each lambda must be a nonnegative DOUBLE PRECISION value. A value of zero disables regularization. Default behavior: The function computes the regularization parameter sequence using the num.lambdas and min.lambda.ratio argument values.",
      "description": "Disallowed if NumLambdas is specified. Specifies the regularization parameter sequence. Each lambda must be a nonnegative DOUBLE PRECISION value. A value of zero disables regularization. Default behavior: The function computes the regularization parameter sequence using the NumLambdas and MinLambdaRatio argument values.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "lambda",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "defaultValue": 10000,
      "lowerBound": 1,
      "upperBound": 100000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxIterNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum number of iterations over the data for all lambda values. The parameter max_iterations must be a positive INTEGER value. Default: 100000.",
      "description": "Specifies the maximum number of iterations over the data for all lambda values. The parameter max_iterations must be a positive INTEGER value. Default: 100000.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.iter.num",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "defaultValue": 1e-07,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "StopThreshold",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the convergence threshold",
      "description": "Specifies the convergence threshold",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "stop.threshold",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [
        "Binomial",
        "Gaussian"
      ],
      "defaultValue": "Gaussian",
      "isOutputColumn": false,
      "name": "Family",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Family such as Binomila or Gaussian",
      "description": "Family such as Binomila or Gaussian",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "family",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": false,
      "name": "Randomization",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specify to perform randomization on the input table. The default is false. If the specified input data has been randomized, it is not necessary to use the argument clause. ",
      "description": "Specify to perform randomization on the input table. The default is false. If the specified input data has been randomized, it is not necessary to use the argument clause. ",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "randomization",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SequenceInputBy",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}
