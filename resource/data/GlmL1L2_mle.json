{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "GlmL1L2",
  "function_version": "1.10",
  "function_type": "driver",
  "function_alias_name": "GLML1L2",
  "function_r_name": "aa.glml1l2",
  "short_description": "The GlmL1L2 function supports the regularization models ridge, lasso and elastic net.",
  "long_description": "The GLML1L2 function differs from the GLM function in these ways: GLML1L2 supports the regularization models ridge, LASSO, and elastic net. GLML1L2 outputs a model table and, optionally, a factor table (GLM outputs only a model table). You can input the model table and factor table to the GLML1L2Predict function.",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "predefined",
            "name": "attribute",
            "dataType": "varchar(32)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "category",
            "dataType": "varchar(128)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "estimate",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "information",
            "dataType": "varchar(64)",
            "manipulations": []
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the table that contains the columns described in the table in Input.",
      "description": "Specifies the name of the table that contains the columns described in the table in Input.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "input.table",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "FactorTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifing the output table will output factorized table based on the argument specified in either Randomization or CategoricalColumns. Then in the future, the table can be used as the input table without the need of performing randomization or categorical-to-numerical conversion again.",
      "description": " Specify the name for the output table that contains the result. The result is based on either CategoricalColumns or Randomization; therefore, you must also specify either CategoricalColumns or Randomization ('true'). You can use factor_table as InputTable for future GLML1L2 function calls, thereby saving the function from repeating the categorical-to-numerical conversion or randomization.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "factor.table",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "FeatureColumns"
      ],
      "isRequired": true,
      "rDescription": "Specifies the names of the input table columns that contain the variables to use as predictors (independent variables).",
      "description": "Specifies the names of the input_table columns that contain the variables to use as predictors (independent variables).",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "feature.columns",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -1
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ResponseColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the responses.",
      "description": "Specify the name of the InputTable column that contains the responses.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "response.column",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": 0
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "STRING",
        "INTEGER"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoricalColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the input table columns that contain the categorical values.",
      "description": " Specify the names of the InputTable columns that contain categorical variables, and which of their categories to use in the model. categorical_column_and_categories Descriptions ' categorical_column : max_cardinality ' Uses most common categories in categorical_column and groups other categories into category 'others'. For example, 'column_a:3' specifies that for column_a, function uses 3 most common categories and sets category of rows that do not belong to those 3 categories to 'others'. ' categorical_column :( category [,...])' Uses specified categories of categorical_column and groups other categories into category 'others'. For example, 'column_a : (red, yellow, blue)' specifies that for column_a, function uses categories red, yellow, and blue, and sets category of rows that do not belong to those categories to 'others'. ' categorical_column ' Uses all categories in categorical_column . If you use this argument, you must also specify the FactorTable argument, and in the FeatureColumns argument, you must specify each categorical_column . Default behavior: The function treats all variables as numerical. Note: For information about columns that you must identify as categorical, see Identification of Categorical Columns.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "categorical.columns",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -2
    },
    {
      "defaultValue": 0.0,
      "lowerBound": 0,
      "upperBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Alpha",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specify whether to use Lasso, Ridge or Elastic Net. If the value is 0, Ridge is used. If the value is 1, Lasso is used. If any value in between, Elastic Net is applied. ",
      "description": " Specify the mixing parameter for penalty computation (see the following table). The alpha must be in [0, 1]. If alpha is in (0,1), it represents \u03b1 in the elastic net regularization formula in GLM2. alpha Regularization Type Parameter Description 0 Ridge \u00bd (0,1) Elastic net 1 LASSO Default: 0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "alpha",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Lambda",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Disallowed if num.lambdas is specified. Specifies the regularization parameter sequence. Each lambda must be a nonnegative DOUBLE PRECISION value. A value of zero disables regularization. Default behavior: The function computes the regularization parameter sequence using the num.lambdas and min.lambda.ratio argument values.",
      "description": " Specify the parameter that controls the magnitude of the regularization term. A value of zero disables regularization. Default: 0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "lambda",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "defaultValue": 10000,
      "lowerBound": 1,
      "upperBound": 100000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxIterNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum number of iterations over the data for all lambda values. The parameter max_iterations must be a positive INTEGER value. Default: 100000.",
      "description": " Specify the maximum number of iterations over the data. The parameter max_iterations must be a positive INTEGER value in the range [1, 100000]. Default: 10000",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.iter.num",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "defaultValue": 1e-07,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "StopThreshold",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the convergence threshold",
      "description": " Specify the convergence threshold. The threshold must be a nonnegative DOUBLE PRECISION value. Default: 1.0e -7",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "stop.threshold",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [
        "Binomial",
        "Gaussian"
      ],
      "defaultValue": "Gaussian",
      "isOutputColumn": false,
      "name": "Family",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Family such as Binomila or Gaussian",
      "description": " Specify the distribution exponential family. Default: 'GAUSSIAN'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "family",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": false,
      "name": "Randomization",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specify to perform randomization on the input table. The default is false. If the specified input data has been randomized, it is not necessary to use the argument clause. ",
      "description": " Specify whether to randomize the InputTable data. If you use this argument, you must also specify the FactorTable argument. Default: 'false'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "randomization",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}