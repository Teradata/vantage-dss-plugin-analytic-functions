{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "2",
  "function_name": "gTree",
  "function_version": "1.4",
  "function_type": "non-driver",
  "function_alias_name": "GTree",
  "function_r_name": "aa.gtree",
  "short_description": "Implements the GTree SQL-GR function.",
  "long_description": "The GTree function follows all paths in a graph, starting from a given set of root vertices, and calculates specified aggregate functions along those paths. The GTree function is similar to the function NTree, but GTree is implemented using the SQL-GR engine. The SQL-GR engine allows the GTree function to traverse arbitrary graphs. Some information in NTree arguments is input to the GTree function differently, as the following table shows.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "vertices",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The table defining the set of vertices in the graph.",
      "description": "The table defining the set of vertices in the graph.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "vertices",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "edges",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The table defining the set of edges in the graph.",
      "description": "The table defining the set of edges in the graph.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "edges",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "root",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The table defining the set of vertices from which GTree will start traversing the graph.",
      "description": "The table defining the set of vertices from which GTree will start traversing the graph.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "root",
      "useInR": true,
      "rOrderNum": 3
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "edges"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetKey",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the columns in the edges table that identify the target vertex of an edge.",
      "description": "Specify the names of the columns in the edges table that identify the target vertex of an edge.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "target.key",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "defaultValue": false,
      "name": "AllowCycles",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the input graph can include cycles. The default value is 'false'.",
      "description": " Specify whether the input graph can include cycles. Default: 'false'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "allow.cycles",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 1000,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxDepth",
      "alternateNames": [
        "MaxIterNum"
      ],
      "isRequired": false,
      "rDescription": "Specifies the maximum depth to which the function traverses the graph (a nonnegative integer). The default value is 1000.",
      "description": " Specify the maximum depth to which the function traverses the graph (a nonnegative integer). Default: 1000",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.iter.num",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [
        "ALL",
        "END"
      ],
      "defaultValue": "END",
      "isOutputColumn": false,
      "name": "OutputType",
      "alternateNames": [
        "Output"
      ],
      "isRequired": false,
      "rDescription": "Specifies whether the function outputs all paths ('all') or only paths that end by reaching a leaf vertex, a cycle, or the maximum number of iterations ('end'). The default value is 'end'.",
      "description": " Specify whether the function outputs all paths ('all') or only paths that end by reaching a leaf vertex, a cycle, or the maximum number of iterations ('end'). Default: 'end'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "output",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Results",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the aggregate functions that the function calculates along each vertex in each path. The function outputs one column of results for each aggregate function. The column name is alias, if specified; otherwise it is func(expr).",
      "description": "[Required if you omit EdgeResults.] Specify the aggregate functions to calculate along each vertex in each path (see the following table). The function outputs a results column for each aggregate function. The column name is alias , if specified; otherwise it is func ( expr ).",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "results",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "EdgeResults",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the aggregate functions that the function calculates along each edge in each path. The function outputs one column of results for each aggregate function. The column name is alias, if specified; otherwise it is func(expr).",
      "description": "[Required if you omit Results.] Specify the aggregate functions to calculate along each edge in each path (see the following table). The function outputs a results column for each aggregate function. The column name is alias , if specified; otherwise it is func ( expr ).",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "edge.results",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "defaultValue": true,
      "name": "FinalEdgeFlag",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the function includes the edge that follows the final vertex when calculating the functions that edge.results specifies. The default value is 'true'.",
      "description": " Specify whether to include the edge that follows the final vertex when calculating the functions that EdgeResults specifies. Default: 'true'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "final.edge.flag",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SequenceInputBy",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}