{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "SAX2",
  "function_version": "1.6",
  "function_type": "non-driver",
  "function_alias_name": "SAX",
  "function_r_name": "aa.sax",
  "short_description": "Implements the SAX algorithm for creating symbolic representations of time series.",
  "long_description": "Implements the SAX algorithm for creating symbolic representations of time series. Time series can be represented as string, byte arrays, JSON bitmaps, or character sequences.",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "parameter",
            "name": "Accumulate.*",
            "dataType": "unchanged",
            "manipulations": []
          }
        ]
      },
      {
        "instruction": "CASE",
        "arguments": [
          {
            "condition": [
              {
                "leftOperand": "valueFromParameter(OutputType)",
                "operator": "=",
                "valueType": "string",
                "rightOperand": "string"
              }
            ],
            "action": [
              {
                "instruction": "ADD",
                "placement": "end",
                "arguments": [
                  {
                    "source": "predefined",
                    "name": "time_column_start",
                    "dataType": "bytea",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "time_column_end",
                    "dataType": "bytea",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_saxcode",
                    "dataType": "varchar",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_mean",
                    "dataType": "double precision",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_stdev",
                    "dataType": "double precision",
                    "manipulations": []
                  }
                ]
              }
            ]
          },
          {
            "condition": [
              {
                "leftOperand": "valueFromParameter(OutputType)",
                "operator": "=",
                "valueType": "string",
                "rightOperand": "bytes"
              }
            ],
            "action": [
              {
                "instruction": "ADD",
                "placement": "end",
                "arguments": [
                  {
                    "source": "predefined",
                    "name": "time_column_start",
                    "dataType": "bytea",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "time_column_end",
                    "dataType": "bytea",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_saxcode",
                    "dataType": "varchar",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_mean",
                    "dataType": "double precision",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_stdev",
                    "dataType": "double precision",
                    "manipulations": []
                  }
                ]
              }
            ]
          },
          {
            "condition": [
              {
                "leftOperand": "valueFromParameter(OutputType)",
                "operator": "=",
                "valueType": "string",
                "rightOperand": "bitmap"
              }
            ],
            "action": [
              {
                "instruction": "ADD",
                "placement": "end",
                "arguments": [
                  {
                    "source": "predefined",
                    "name": "time_column_start",
                    "dataType": "varchar(3200)",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "time_column_end",
                    "dataType": "varchar(3200)",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_bitmap",
                    "dataType": "varchar",
                    "manipulations": []
                  }
                ]
              }
            ]
          },
          {
            "condition": [
              {
                "leftOperand": "valueFromParameter(OutputType)",
                "operator": "=",
                "valueType": "string",
                "rightOperand": "characters"
              }
            ],
            "action": [
              {
                "instruction": "ADD",
                "placement": "end",
                "arguments": [
                  {
                    "source": "inputTable",
                    "name": "input.PartitionBy.*",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "time_column_start",
                    "dataType": "varchar(128)",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "time_column_end",
                    "dataType": "varchar(128)",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "saxchar_n",
                    "dataType": "char(1)",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_mean",
                    "dataType": "double precision",
                    "manipulations": []
                  },
                  {
                    "source": "predefined",
                    "name": "target_column_n_stdev",
                    "dataType": "double precision",
                    "manipulations": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Input table",
      "description": "Input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "meanstats",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "meanstats table (optional) that contains the global means of each value_column of the input table.",
      "description": "meanstats table (optional) that contains the global means of each value_column of the input table.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "meanstats.data",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "stdevstats",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "stdevstats table (optional) that contains the global standard deviations of each value_column of the input table.",
      "description": "stdevstats table (optional) that contains the global standard deviations of each value_column of the input table.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "stdevstats.data",
      "useInR": true,
      "rOrderNum": 3
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "ValueColumns"
      ],
      "isRequired": true,
      "rDescription": "Specifies the names of the input table columns that contain the time series data to be transformed.",
      "description": "Specify the names of the input table columns that contain the time series data to transform.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "value.columns",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TimeColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the input table column that contains the time axis of the data.",
      "description": " Specify the name of the input table column that contains the time axis of the data.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "time.column",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The names of the input table columns that are to appear in the output table. For each sequence in the input table, ta.sax2 choose the value corresponding to the first time point in the sequence to output as the accumulate value.",
      "description": " Specify the names of the input table columns that are to appear in the output table. For each sequence in the input table, SAX choose the value corresponding to the first time point in the sequence to output as the accumulate value.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 17
    },
    {
      "permittedValues": [
        "sliding",
        "global"
      ],
      "defaultValue": "global",
      "isOutputColumn": false,
      "name": "WindowType",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Determines how much data the function processes at one time: 'global' (default): The function computes the SAX code using a single mean and standard deviation for the entire data set.'sliding': The function recomputes the mean and standard deviation for a sliding window of the data set.",
      "description": " Specify how much data the function processes at one time: Option Description 'global' (Default) Function computes SAX code using single mean and standard deviation for entire data set. 'sliding' Function recomputes mean and standard deviation for sliding window of data set.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "window.type",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [
        "STRING",
        "BITMAP",
        "BYTES",
        "CHARACTERS"
      ],
      "defaultValue": "string",
      "isOutputColumn": false,
      "name": "OutputType",
      "alternateNames": [
        "Output"
      ],
      "isRequired": false,
      "rDescription": "Determines how the function outputs the results:'string' (default): The function outputs a list of SAX codes for each window.'bytes': The function outputs the list of SAX codes as compact byte arrays (which are not \u201chuman-readable\u201d).'bitmap': The function outputs a JSON representation of a SAX bitmap.'characters': The function outputs one character for each line.",
      "description": " Specify how the function outputs the results: Option Description 'string' (Default) Function outputs list of SAX codes for each window. 'bytes' Function outputs list of SAX codes as compact byte arrays (which humans cannot read). 'bitmap' Function outputs JSON representation of SAX bitmap. 'characters' Function outputs one character for each line.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "output",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "defaultValue": [
        NaN
      ],
      "rDefaultValue": [
        null
      ],
      "allowNaN": true,
      "matchLengthOfArgument": "TargetColumns",
      "allowPadding": true,
      "name": "Mean",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the global mean values that the function uses to calculate the SAX code for every partition. A mean_value has the data type DOUBLE PRECISION. If mean specifies only one value and value.columns specifies multiple columns, then the specified value applies to every value_column. If mean specifies multiple values, then it must specify a value for each value_column. The nth mean_value corresponds to the nth value_column. Tip: To specify a different global mean value for each partition, use the multiple-input syntax and put the values in the meanstats table.",
      "description": "[Single-input syntax only] Specify the global mean values that the function uses to calculate the SAX code for every partition. A mean_value has the data type DOUBLE PRECISION. If Mean specifies only one value and TargetColumns specifies multiple columns, the specified value applies to every target_column . If Mean specifies multiple values, it must specify a value for each target_column . The n th mean_value corresponds to the n th target_column . Tip: To specify a different global mean value for each partition, use the multiple-input syntax and put the values in the meanstats table.",
      "datatype": "DOUBLE",
      "allowsLists": true,
      "rName": "mean",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": [
        NaN
      ],
      "rDefaultValue": [
        null
      ],
      "lowerBound": 0,
      "lowerBoundType": "EXCLUSIVE",
      "allowNaN": true,
      "matchLengthOfArgument": "TargetColumns",
      "allowPadding": true,
      "name": "StDev",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the global standard deviation values that the function uses to calculate the SAX code for every partition. A stdev_value has the data type DOUBLE PRECISION and its value must be greater than 0. If Stdev specifies only one value and value.columns specifies multiple columns, then the specified value applies to every value_column. If Stdev specifies multiple values, then it must specify a value for each value_column. The nth stdev_value corresponds to the nth value_column. Tip: To specify a different global standard deviation value for each partition, use the multiple-input syntax and put the values in the stdevstats table.",
      "description": "[Single-input syntax only] Specify the global standard deviation values that the function uses to calculate the SAX code for every partition. A stdev_value has the data type DOUBLE PRECISION and its value must be greater than 0. If Stdev specifies only one value and TargetColumns specifies multiple columns, the specified value applies to every target_column . If Stdev specifies multiple values, it must specify a value for each target_column . The n th stdev_value corresponds to the n th target_column . Tip: To specify a different global standard deviation value for each partition, use the multiple-input syntax and put the values in the stdevstats table.",
      "datatype": "DOUBLE",
      "allowsLists": true,
      "rName": "st.dev",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "WindowSize",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the size of the sliding window. The value must be an integer greater than 0.",
      "description": "[Required if WindowType is 'sliding', disallowed otherwise.] Specify the size of the sliding window. The value must be an integer greater than 0.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "window.size",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "defaultValue": 1,
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "OutputFrequency",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of data points that the window slides between successive outputs. The value must be an integer greater than 0. The default value is 1. Note: window.type value must be 'sliding' and Output value cannot be 'characters'. If window.type is 'sliding' and Output value is 'characters', then output.frequency is automatically set to the value of window.size, to ensure that a single character is assigned to each time point. If the number of data points in the time series is not an integer multiple of the window size, then the function ignores the leftover parts.",
      "description": " Specify the number of data points that the window slides between successive outputs. The value must be an integer greater than 0. Default: 1 Note: WindowType value must be 'sliding' and OutputType value cannot be 'characters'. If WindowType is 'sliding' and OutputType value is 'characters', OutputFrequency is automatically set to the value of WindowSize, so that a single character is assigned to each time point. If the number of data points in the time series is not an integer multiple of the window size, the function ignores the leftover parts.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "output.frequency",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "defaultValue": [
        1
      ],
      "lowerBound": 0,
      "lowerBoundType": "EXCLUSIVE",
      "allowNaN": false,
      "requiredLength": 1,
      "matchLengthOfArgument": "TargetColumns",
      "allowPadding": true,
      "name": "PointsPerSymbol",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of data points to be converted into one SAX symbol. Each value must be an integer greater than 0. The default value is 1. Note: window.type value must be 'global'.",
      "description": " Specify the number of data points to convert into one SAX symbol. Each value must be an integer greater than 0. Default: 1 Note: WindowType value must be 'global'.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "points.persymbol",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "lowerBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "allowNaN": false,
      "requiredLength": 1,
      "matchLengthOfArgument": "TargetColumns",
      "allowPadding": true,
      "name": "SymbolsPerWindow",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of SAX symbols to be generated for each window. Each value must be an integer greater than 0. The default value is the value of window.size. Note: window.type value must be 'sliding'.",
      "description": " Specify the number of SAX symbols to create for each window. Each value must be an integer greater than 0. Note: WindowType value must be 'sliding'. Default: window_size (the value of WindowSize)",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "symbols.perwindow",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "defaultValue": [
        4
      ],
      "lowerBound": 2,
      "upperBound": 20,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "requiredLength": 1,
      "matchLengthOfArgument": "TargetColumns",
      "allowPadding": true,
      "name": "AlphabetSize",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of symbols in the SAX alphabet. The value must be an integer in the range [2, 20]. The default value is 4.",
      "description": " Specify the number of symbols in the SAX alphabet. The value must be an integer in the range [2,\u00a020]. Default: 4",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "alphabet.size",
      "useInR": true,
      "rOrderNum": 14
    },
    {
      "defaultValue": [
        2
      ],
      "lowerBound": 1,
      "upperBound": 4,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "requiredLength": 1,
      "matchLengthOfArgument": "TargetColumns",
      "allowPadding": true,
      "name": "BitmapLevel",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of consecutive symbols to be converted to one symbol on a bitmap. For bitmap level 1, the bitmap contains the symbols 'a', 'b', 'c', and so on; for bitmap level 2, the bitmap contains the symbols 'aa', 'ab', 'ac', and so on. The input value must be an integer in the range [1, 4]. The default value is 2. Note: Output value must be 'bitmap'.",
      "description": " Specify the number of consecutive symbols to convert to one symbol on a bitmap. For bitmap level 1, the bitmap contains the symbols 'a', 'b', 'c', and so on; for bitmap level 2, the bitmap contains the symbols 'aa', 'ab', 'ac', and so on. The input value must be an integer in the range [1,\u00a04]. Default: 2 Note: OutputType value must be 'bitmap'.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "bitmap.level",
      "useInR": true,
      "rOrderNum": 15
    },
    {
      "defaultValue": false,
      "name": "OutputStats",
      "alternateNames": [
        "PrintCodeStats"
      ],
      "isRequired": false,
      "rDescription": "Specifies whether the function prints the mean and standard deviation. The default value is 'false'. Note: Output value must be 'string'.",
      "description": " Specify whether the function prints the mean and standard deviation. Default: 'false' Note: OutputType value must be 'string'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "print.stats",
      "useInR": true,
      "rOrderNum": 16
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SequenceInputBy",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}