{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "ChangePointDetection",
  "function_version": "1.2",
  "function_type": "non-driver",
  "function_alias_name": "ChangePointDetection",
  "function_r_name": "aa.changepoint.detection",
  "short_description": "ChangePointDetection function detects change point for retrospective data.",
  "long_description": "The change-point search method for retrospective change-point detection, binary segmentation, uses this procedure: Binary segmentation is an approximation method, because the change point is decided with only part of the data. However, this method is efficient and has an O( Taking normal distribution as an example, the change-point problem is to test the following null hypothesis: as opposed to the alternatives, and Binary segmentation performs the following tests in each iteration: and These are the formulas for the log likelihood functions These are the formulas for the maximum likelihood estimation of From the preceding formulas, the binary segmentation algorithm computes max If the algorithm detects a change point, it adds that change point to its list of candidate change points and splits the data into two parts. From the candidate change points that the algorithm finds in the two parts, it selects the one with the minimum loss. The ChangePointDetection function detects change points in a stochastic process or time series, using retrospective change-point detection, implemented with these algorithms: Search algorithm: binary search Segmentation algorithm: normal distribution and linear regression Use this function when the input data can be stored in memory and the application does not require a real-time response. If the input data cannot be stored in memory, or the application requires a real-time response, use the function ChangePointDetectionRT.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": true,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "This table defining the input time series data.",
      "description": "This table defining the input time series data.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumn",
      "alternateNames": [
        "ValueColumn"
      ],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the time series data.",
      "description": "Specifies the name of the input table column that contains the time series data.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "value.column",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the input table columns to copy to the output table. Tip: To identify change points in the output table, specify the columns that appear in partition_exp and order_by_exp.",
      "description": "Specify the names of the input table columns to copy to the output table. Tip: To identify change points in the output table, specify the columns that appear in partition_exp and order_by_exp .",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [
        "normal_distribution",
        "linear_regression"
      ],
      "defaultValue": "normal_distribution",
      "isOutputColumn": false,
      "name": "SegmentationMethod",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies one of these segmentation methods:'normal_distribution' (default): In each segment, the data is in a normal distribution, 'linear_regression': In each segment, the data is in linear regression.",
      "description": " Specify the segmentation method: 'normal_distribution' (Default) In each segment, data is in normal distribution. 'linear_regression' In each segment, data is in linear regression.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "segmentation.method",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [
        "binary"
      ],
      "defaultValue": "binary",
      "isOutputColumn": false,
      "name": "SearchMethod",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the search method, binary segmentation. This is the default and only possible value.",
      "description": " Specify the search method, binary segmentation.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "search.method",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 10,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxChangeNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum number of change points to detect. The default value is 10.",
      "description": " Specify the maximum number of change points to detect. Default: 10",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.change.num",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "defaultValue": "BIC",
      "isOutputColumn": false,
      "name": "Cost",
      "alternateNames": [
        "Penalty"
      ],
      "isRequired": false,
      "rDescription": "Specifies the penalty function, which is used to avoid over-fitting. Possible values are: 'BIC' (default), 'AIC', threshold, a DOUBLE PRECISION valueFor BIC, the condition for the existence of a change point is: ln(L1)\u2212ln(L0) > (p1-p0)*ln(n)/2 For normal distribution and linear regression, the condition is: (p1-p0)*ln(n)/2 = ln(n) For AIC, the condition for the existence of a change point is: ln(L1)\u2212ln(L0) > p1-p0 For normal distribution and linear regression, the condition is: p1-p0 = 2 For threshold, the specified value is compared to: ln(L1)\u2212ln(L0) L1 and L2 are the maximum likelihood estimation of hypotheses H1 and H0. For normal distribution, the definition of Log(L1 ) and Log(L0) are in \u201cBackground\u201d. p is the number of additional parameters introduced by adding a change point. p is used in the information criterion BIC or AIC. p1 and p0 represent this parameter in hypotheses H1 and H0 separately",
      "description": "Specifies the penalty function, which is used to avoid over-fitting. Possible values are: 'BIC' (default), 'AIC', threshold, a DOUBLE PRECISION valueFor BIC, the condition for the existence of a change point is: ln(L1)\u2212ln(L0) > (p1-p0)*ln(n)/2 For normal distribution and linear regression, the condition is: (p1-p0)*ln(n)/2 = ln(n) For AIC, the condition for the existence of a change point is: ln(L1)\u2212ln(L0) > p1-p0 For normal distribution and linear regression, the condition is: p1-p0 = 2 For threshold, the specified value is compared to: ln(L1)\u2212ln(L0) L1 and L2 are the maximum likelihood estimation of hypotheses H1 and H0. For normal distribution, the definition of Log(L1 ) and Log(L0) are in \u201cBackground\u201d. p is the number of additional parameters introduced by adding a change point. p is used in the information criterion BIC or AIC. p1 and p0 represent this parameter in hypotheses H1 and H0 separately",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "penalty",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [
        "changepoint",
        "segment",
        "verbose"
      ],
      "defaultValue": "changepoint",
      "isOutputColumn": false,
      "name": "OutputType",
      "alternateNames": [
        "OutputOption"
      ],
      "isRequired": false,
      "rDescription": "Specifies the output table columns. Refer to \u201cOutput. The default value is 'CHANGEPOINT'.",
      "description": "Specifies the output table columns. Refer to \u201cOutput. The default value is 'CHANGEPOINT'.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "output.option",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}