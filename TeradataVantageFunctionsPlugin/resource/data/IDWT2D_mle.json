{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "IDWT2D",
  "function_version": "1.6",
  "function_type": "driver",
  "function_alias_name": "IDWT2D",
  "function_r_name": "aa.idwt2d",
  "short_description": "This function performs 2D reverse wavelet transform. ",
  "long_description": "The IDWT2D function is the inverse of DWT2D; that is, IDWT2D applies inverse wavelet transforms on multiple sequences simultaneously. IDWT2D takes as input the output table and meta table output by DWT2D and outputs the sequences as 2-dimensional matrixes. (Because the IDWT2D output is comparable to the DWT2D input, the inverse transformation is also called the reconstruction.) This is a typical IDWT2D use case:",
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table or view that contains the coefficients generated by ta.dwt2d. Typically, this table is the output table of ta.dwt2d.",
      "description": "Specifies the name of the input table or view that contains the coefficients generated by DWT2D. Typically, this table is the output table of DWT2D.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "MetaTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": " Specifies the name of the input table or view that contains the meta information used in ta.dwt2d. Typically, this table is the meta table output by ta.dwt2d.",
      "description": "Specifies the name of the input table or view that contains the meta information used in DWT2D. Typically, this table is the meta table output by DWT2D.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "meta.table",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "OutputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name for the table that the function creates to store the reconstructed result. This table must not exist.",
      "description": "Specify the name for the table that the function creates to store the reconstructed result. This table must not exist.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "output.table",
      "useInR": true,
      "rOrderNum": 100
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SortColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input column that represents the order of coefficients in each sequence (the waveletid column in the ta.dwt2d output table). The column must contain a sequence of integer values that start from 1 for each sequence. If a value is missing from the sequence, then the function treats the corresponding data column as 0.",
      "description": "Specify the name of the input column that represents the order of coefficients in each sequence (the waveletid column in the DWT2D output table). The column must contain a sequence of integer values that start from 1 for each sequence. If a value is missing from the sequence, the function treats the corresponding data column as 0.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "sort.column",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "InputColumns"
      ],
      "isRequired": true,
      "rDescription": "Specifies the names of the columns in the data or view that contain the data to be transformed. These columns must contain numeric values between -1e308 and 1e308. The function treats NULL as 0.",
      "description": "Specifies the names of the columns in the input table or view that contain the data to be transformed. These columns must contain numeric values between -1e308 and 1e308. The function treats NULL as 0.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "input.columns",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "DISTRIBUTIONTYPE"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "PartitionColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the partition.columns, which identify the sequences. Rows with the same partition.columns values belong to the same sequence. If you specify multiple partition.columns, then the function treats the first one as the distribute key of the output and meta tables. By default, all rows belong to one sequence, and the function generates a distribute key column named dwt_idrandom_name in both the output table and the meta table. In both tables, every cell of dwt_idrandom_name has the value 1.",
      "description": " Specify the names of the partition columns, which identify the sequences. Rows with the same partition column values belong to the same sequence. If you specify multiple partition columns, the function treats the first one as the distribute key of the output and meta tables. Default behavior: All rows belong to one sequence, and the function creates a distribute key column named dwt_id random_name in both the output table and the meta table. In both tables, every cell of dwt_id random_name has the value 1.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "partition.columns",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": true,
      "name": "VerboseFlag",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether to ignore (not output) rows in which all coefficient values are very small (having an absolute value less than 1e-12). The default value is 'true'. For a sparse input matrix, ignoring such rows reduces the output table size.",
      "description": " Specify whether to ignore (not output) rows in which all coefficient values have an absolute value less than 1e -12 ). For a sparse input matrix, ignoring such rows reduces the output table size. Default: 'true'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "compact.output",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}