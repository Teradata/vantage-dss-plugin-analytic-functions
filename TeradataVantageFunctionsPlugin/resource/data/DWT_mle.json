{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "DWT",
  "function_version": "1.7",
  "function_type": "driver",
  "function_alias_name": "DWT",
  "function_r_name": "aa.dwt",
  "short_description": "This function performs 1D forward wavelet transform.",
  "long_description": "The DWT function implements the Mallat algorithm (an iterate algorithm in the Discrete Wavelet Transform field) and applies wavelet transform on multiple sequences simultaneously. The input is typically a set of time series sequences. You specify the wavelet name or wavelet filter table, transform level, and (optionally) extension mode. The function returns the transformed sequences in Hilbert space with the corresponding component identifiers and indices. (The transformation is also called the decomposition.) You can filter the result to reduce the lengths of the transformed sequences and then use the function IDWT to reconstruct them; therefore, the DWT and IDWT functions are useful for compression and removing noise.",
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the table or view that contains the sequences to be transformed",
      "description": "Specifies the name of the table or view that contains the sequences to be transformed",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "WaveletFilterTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the table that contains the coefficients of the wave filters.",
      "description": "Specifies the name of the table that contains the coefficients of the wave filters.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "wavelet.filter",
      "useInR": true,
      "rOrderNum": 5
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "OutputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name for the table that the function creates to store the coefficients generated by the wavelet transform. This table must not exist.",
      "description": "Specify the name for the table that the function creates to store the coefficients output by the wavelet transform. This table must not exist.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "coefficient",
      "useInR": true,
      "rOrderNum": 100
    },
    {
      "isOutputTable": true,
      "name": "MetaInformationTable",
      "alternateNames": [
        "MetaTable"
      ],
      "isRequired": true,
      "rDescription": "Specifies the name for the table that the function creates to store the meta information for the wavelet transform. This table must not exist.",
      "description": "Specifies the name for the table that the function creates to store the meta information for the wavelet transform. This table must not exist.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "meta.table",
      "useInR": true,
      "rOrderNum": 101
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SortColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the column that defines the order of samples in the sequences to be transformed. In a time series sequence, the column can consist of timestamp values. Note: If sort_column has duplicate elements in a sequence (that is, in a partition), then sequence order can vary, and the function can produce different transform results for the sequence.",
      "description": "Specify the name of the column that defines the order of samples in the sequences to transform. In a time series sequence, the column can consist of timestamp values. Note: If sort_column has duplicate elements in a sequence (that is, in a partition), sequence order can vary, and the function can produce different transform results for the sequence.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "sort.column",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "InputColumns"
      ],
      "isRequired": true,
      "rDescription": "Specifies the names of the columns in the input table or view that contain the data to be transformed. These columns must contain numeric values between -1e308 and 1e308. The function treats NULL as 0.",
      "description": "Specify the names of the columns in the input table or view that contain the data to transform. These columns must contain numeric values between -1e 308 and 1e 308 . The function treats NULL as 0.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "input.columns",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "DISTRIBUTIONTYPE"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "PartitionColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the partition.columns, which identify the sequences. Rows with the same partition.columns values belong to the same sequence. If you specify multiple partition.columns, then the function treats the first one as the distribute key of the output and meta tables. By default, all rows belong to one sequence, and the function generates a distribute key column named dwt_idrandom_name in both the output table and the meta table. In both tables, every cell of dwt_idrandom_name has the value 1.",
      "description": " Specify the names of the partition columns, which identify the sequences. Rows with the same partition column values belong to the same sequence. If you specify multiple partition columns, the function treats the first one as the distribute key of the output and meta tables. Default behavior: All rows belong to one sequence, and the function creates a distribute key column named dwt_id random_name in both the output table and the meta table. In both tables, every cell of dwt_id random_name has the value 1.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "partition.columns",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "lowerBound": 1,
      "upperBound": 1000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "WaveletTransformLevel",
      "alternateNames": [
        "Level"
      ],
      "isRequired": true,
      "rDescription": "Specifies the wavelet transform level. The value WaveletTransformLevel must be an integer in the range [1, 1000].",
      "description": "Specify the wavelet transform level. The value level must be an integer in the range [1,\u00a01000].",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "level",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Wavelet",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a wavelet filter name",
      "description": "[Required if you omit the wavelet filter table.] Specify a wavelet filter name from the following table. Wavelet Family Supported Wavelet Names (wavelet values) Daubechies 'db1' or 'haar', 'db2', .... ,'db10' Coiflets 'coif1', ... , 'coif5' Symlets 'sym1', ... ,' sym10' Discrete Meyer 'dmey' Biorthogonal 'bior1.1', 'bior1.3', 'bior1.5', 'bior2.2', 'bior2.4', 'bior2.6', 'bior2.8', 'bior3.1', 'bior3.3', 'bior3.5', 'bior3.7', 'bior3.9', 'bior4.4', 'bior5.5' Reverse Biorthogonal 'rbio1.1', 'rbio1.3', 'rbio1.5' 'rbio2.2', 'rbio2.4', 'rbio2.6', 'rbio2.8', 'rbio3.1', 'rbio3.3', 'rbio3.5', 'rbio3.7','rbio3.9', 'rbio4.4', 'rbio5.5'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "wavelet",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [
        "sym",
        "zpd",
        "ppd"
      ],
      "defaultValue": "sym",
      "isOutputColumn": false,
      "name": "ExtensionMode",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " Specifies the method for handling border distortion, an extension_mode from Table 3 - 104. The default value is 'sym'.",
      "description": " Specify the wavelet transform level. The value level must be an integer in the range [1,\u00a01000]. For the examples in the following table, assume that the sequence before the extension is 1\u00a02\u00a03\u00a04 and the convolution kernel in the wavelet filter has the length 6, which means that the length of the sequence is to extend by 5 positions before and after the sequence. Supported Extension Mode (extension_mode value) Description sym (Default) Symmetrically replicate boundary values, mirroring the points near the boundaries. For example: 4 4 3 2 1 | 1 2 3 4 | 4 3 2 1 1 zpd Zero-pad boundary values with zero. For example: 0 0 0 0 0 | 1 2 3 4 | 0 0 0 0 0 ppd Periodic extension, fill boundary values as the input sequence is a periodic one. For example: 4 1 2 3 4 | 1 2 3 4 | 1 2 3 4 1",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "extension.mode",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}