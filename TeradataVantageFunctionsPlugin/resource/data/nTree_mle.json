{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "nTree",
  "function_version": "1.3",
  "function_type": "non-driver",
  "function_alias_name": "NTree",
  "function_r_name": "aa.ntree",
  "short_description": "The nTree function is a hierarchical analysis SQL-MR function that can build and traverse tree structures on all worker machines. The function reads the data only once from the disk and creates the trees in memory.",
  "long_description": "The NTree function is a hierarchical analysis SQL function that can build and traverse tree structures on all worker machines. The function reads the data only once from the disk and creates the trees in memory. The input data must be partitionable, and each partition must fit in memory. Each partition can consist of multiple trees of any size. The function provides different ways of handling cycles.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "input table",
      "description": "input table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "RootNode",
      "alternateNames": [
        "ROOT_NODE"
      ],
      "rDescription": "Specifies the BOOLEAN SQL expression that defines the root nodes of the trees (for example, parent.id IS NULL).",
      "description": "Specifies the BOOLEAN SQL expression that defines the root nodes of the trees (for example, parent_id IS NULL).",
      "datatype": "SQLEXPR",
      "allowsLists": false,
      "rName": "root.node",
      "useInR": true,
      "rOrderNum": 2,
      "isRequired": true
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NodeID",
      "alternateNames": [
        "NODE_ID"
      ],
      "rDescription": "Specifies the SQL expression whose value uniquely identifies a node in the input table (for example, order_id). \nNote: A node can appear multiple times in the data set, with different parents.",
      "description": "Specifies the SQL expression whose value uniquely identifies a node in the input table (for example, order_id). \nNote: A node can appear multiple times in the data set, with different parents.",
      "datatype": "SQLEXPR",
      "allowsLists": false,
      "rName": "node.id",
      "useInR": true,
      "rOrderNum": 3,
      "isRequired": true
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ParentID",
      "alternateNames": [
        "PARENT_ID"
      ],
      "rDescription": "Specifies the SQL expression whose value identifies the parent node.",
      "description": "Specifies the SQL expression whose value identifies the parent node.",
      "datatype": "SQLEXPR",
      "allowsLists": false,
      "rName": "parent.id",
      "useInR": true,
      "rOrderNum": 4,
      "isRequired": true
    },
    {
      "permittedValues": [
        "UP",
        "DOWN"
      ],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Direction",
      "alternateNames": [
        "MODE"
      ],
      "rDescription": "Specifies the direction of tree traversal from the start node\u2014up to the root node or down to the leaf nodes.",
      "description": "Specifies the direction of tree traversal from the start node\u2014up to the root node or down to the leaf nodes.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "mode",
      "useInR": true,
      "rOrderNum": 7,
      "isRequired": true
    },
    {
      "defaultValue": false,
      "name": "AllowCycles",
      "alternateNames": [
        "ALLOW_CYCLES"
      ],
      "rDescription": "Specifies whether trees can contain cycles. If not, a cycle in the data set causes the function to throw an exception. The default value is 'false'. For information about cycles, refer to \u201cCycles in ta.ntree\u201d",
      "description": "Specify whether trees can contain cycles. If not, a cycle in the data set causes the function to throw an exception. For information about cycles, see Cycles in NTree. Default: 'false'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "allow.cycles",
      "useInR": true,
      "rOrderNum": 5,
      "isRequired": false
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "StartsWith",
      "alternateNames": [
        "STARTS_WITH"
      ],
      "rDescription": "Specifies the node from which to start tree traversal\u2014must be 'root', 'leaf ', or a SQL expression that identifies a node.",
      "description": "Specifies the node from which to start tree traversal\u2014must be 'root', 'leaf ', or a SQL expression that identifies a node.",
      "datatype": "SQLEXPR",
      "allowsLists": false,
      "rName": "starts.with",
      "useInR": true,
      "rOrderNum": 6,
      "isRequired": true
    },
    {
      "permittedValues": [
        "END",
        "ALL"
      ],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "OutputType",
      "alternateNames": [
        "OUTPUT"
      ],
      "rDescription": "Specifies when to output a tuple\u2014at every node along the traversal path ('all') or only at the end of the traversal path ('end'). The default value is 'end'.",
      "description": "Specifies when to output a tuple\u2014at every node along the traversal path ('all') or only at the end of the traversal path ('end'). The default value is 'end'.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "output",
      "useInR": true,
      "rOrderNum": 8,
      "isRequired": true
    },
    {
      "defaultValue": 5,
      "lowerBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxDistance",
      "alternateNames": [
        "Max_Distance"
      ],
      "rDescription": "Specifies the maximum tree depth. The default value is 5.",
      "description": " Specify the maximum tree depth. Default: 5",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.distance",
      "useInR": true,
      "rOrderNum": 9,
      "isRequired": false
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Results",
      "alternateNames": [
        "RESULT"
      ],
      "rDescription": "Specifies aggregate operations to perform during tree traversal. The function reports the result of each aggregate operation in the output table. The syntax of aggregate is: \noperation (expression) [ ALIAS alias ] \noperation is either PATH, SUM, LEVEL, MAX, MIN, IS_CYCLE, AVG, or PROPAGATE. expression is a SQL expression. If operation is LEVEL or IS_CYCLE, then expression must be *. \nalias is the name of the output table column that contains the result of the operation. The default value is the string 'operation(expression)' without the quotation marks. For example, PATH(node_name). \nNote: The function ignores alias if it is the same as an input table column name. \nFor the path from the Starts_With node to the last traversed node, the operations do the following: \n PATH: Outputs the value of expression for each node, separating values with '->'. \n SUM: Computes the value of expression for each node and outputs the sum of these values. \n LEVEL: Outputs the number of hops. \n MAX: Computes the value of expression for each node and outputs the highest of these values. \n MIN: Computes the value of expression for each node and outputs the lowest of these values. \n IS_CYCLE: Outputs the cycle (if any). \n AVG: Computes the value of expression for each node and outputs the average of these values. \n PROPAGATE: Evaluates expression with the value of the starts.with node and propagates the result to every node.",
      "description": "Specifies aggregate operations to perform during tree traversal. The function reports the result of each aggregate operation in the output table. The syntax of aggregate is: \noperation (expression) [ ALIAS alias ] \noperation is either PATH, SUM, LEVEL, MAX, MIN, IS_CYCLE, AVG, or PROPAGATE. expression is a SQL expression. If operation is LEVEL or IS_CYCLE, then expression must be *. \nalias is the name of the output table column that contains the result of the operation. The default value is the string 'operation(expression)' without the quotation marks. For example, PATH(node_name). \nNote: The function ignores alias if it is the same as an input table column name. \nFor the path from the Starts_With node to the last traversed node, the operations do the following: \n PATH: Outputs the value of expression for each node, separating values with '->'. \n SUM: Computes the value of expression for each node and outputs the sum of these values. \n LEVEL: Outputs the number of hops. \n MAX: Computes the value of expression for each node and outputs the highest of these values. \n MIN: Computes the value of expression for each node and outputs the lowest of these values. \n IS_CYCLE: Outputs the cycle (if any). \n AVG: Computes the value of expression for each node and outputs the average of these values. \n PROPAGATE: Evaluates expression with the value of the Starts_With node and propagates the result to every node.",
      "datatype": "SQLEXPR",
      "allowsLists": false,
      "rName": "result",
      "useInR": true,
      "rOrderNum": 11,
      "isRequired": true
    },
    {
      "defaultValue": false,
      "name": "OutputLogMessages",
      "alternateNames": [
        "LOGGING"
      ],
      "rDescription": "Specifies whether the function prints log messages. The default value is 'false'.",
      "description": "Specifies whether the function prints log messages. The default value is 'false'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "logging",
      "useInR": true,
      "rOrderNum": 10,
      "isRequired": false
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}