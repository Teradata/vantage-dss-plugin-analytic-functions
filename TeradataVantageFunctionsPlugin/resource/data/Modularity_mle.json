{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "Modularity",
  "function_version": "1.6",
  "function_type": "driver",
  "function_alias_name": "Modularity",
  "function_r_name": "aa.modularity",
  "short_description": "This function divides input graph in communities.",
  "long_description": "The Modularity function uses a clustering algorithm to detect communities in networks (graphs).The function needs no prior knowledge or estimation of starting cluster centers and assumes no particular data distribution of the input data set.",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "parameter",
            "name": "Accumulate.*",
            "dataType": "unchanged",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "resolution",
            "dataType": "real",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "community_id",
            "dataType": "varchar(100)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "num_communities",
            "dataType": "integer",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "modularity_score",
            "dataType": "real",
            "manipulations": []
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "vertices",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "vertex table",
      "description": "vertex table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "vertices.data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "edges",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "edge table",
      "description": "edge table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "edges.data",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "sources",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "source table",
      "description": "source table",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "sources.data",
      "useInR": true,
      "rOrderNum": 3
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "CommunityEdgeTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the table that the function generates to output the weights of the edges between the communities at different resolution levels. If a table with community_edge_table exists, the function overwrites the existing table. If you omit this argument, the function does not create this table.",
      "description": " Specify the name of the table that the function creates to output the weights of the edges between the communities at different resolution levels. If a table named community_edge_table exists, the function overwrites the existing table. If you omit this argument, the function does not create this table.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "community.edge.data",
      "useInR": true,
      "rOrderNum": 100,
      "outputSchema": {
        "property": "outputSchema",
        "outputId": "CommunityEdgeTable",
        "instructions": [
          {
            "instruction": "ADD",
            "placement": "end",
            "arguments": [
              {
                "source": "predefined",
                "name": "src_community_id",
                "dataType": "varchar",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "target_community_id",
                "dataType": "varchar",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "resolution",
                "dataType": "real",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "weight",
                "dataType": "real",
                "manipulations": []
              }
            ]
          }
        ]
      }
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "edges"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetKey",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the key of the target vertex of an edge. The key consists of the names of one or more edges table columns.",
      "description": "Specify the key of the target vertex of an edge. The key consists of the names of one or more edges table columns.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "target.key",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "targetTable": [
        "vertices"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CommunityAssociation",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " Specifies the name of the column that represents the community association of the vertices. Use this argument if you already know some vertex communities.",
      "description": " Specify the name of the column that represents the community association of the vertices. Use this argument if you know some vertex communities.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "community.association",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "targetTable": [
        "vertices"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the vertices columns to copy to the community vertex table. By default, the function copies the vertex_key columns to the output vertex table for each vertex, changing the column names to id, id_1, id_2, and so on.",
      "description": " Specify the names of the vertices columns to copy to the community vertices table. Default behavior: The function copies the vertex_key columns to the output vertices table for each vertex, changing the column names to id , id _1, id _2, and so on.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "targetTable": [
        "edges"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "EdgeWeight",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the edges table column that contains edge weights. The weights are positive values. By default, the weight of each edge is 1 (that is, the graph is unweighted). This argument determines how the function treats duplicate edges (that is, edges with the same source and destination, which might have different weights). For a weighted graph, the function treats duplicate edges as a single edge whose weight is the sum of the weights of the duplicate edges. For an unweighted graph, the function uses only one of the duplicate edges.",
      "description": " Specify the name of the edges table column that contains edge weights. Each edge_weight is a positive value. Default behavior: The weight of each edge is 1 (that is, the graph is unweighted). This argument determines how the function treats duplicate edges (that is, edges with the same source and destination, which might have different weights). For a weighted graph, the function treats duplicate edges as a single edge whose weight is the sum of the weights of the duplicate edges. For an unweighted graph, the function uses only one of the duplicate edges.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "edge.weight",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": [
        1.0
      ],
      "lowerBound": 0.0,
      "upperBound": 1000000.0,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "matchLengthOfArgument": "",
      "allowPadding": false,
      "name": "Resolution",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies hierarchical-level information for the communities. The default resolution is 1.0. If you specify a list of resolution values, the function incrementally finds the communities for each value and for the default value. Each resolution must be a distinct DOUBLE PRECISION value in the range [0.0, 1000000.0]. The value 0.0 puts each node in its own community of size 1. You can specify a maximum of 500 resolution values. To get the modularity of more than 500 resolution points, call the function multiple times, specifying different values in each call.",
      "description": " Specify hierarchical-level information for the communities. For details, see Resolution. If you specify a list of resolution values, the function incrementally finds the communities for each value and for the default value. Each resolution must be a distinct DOUBLE PRECISION value in the range [0.0, 1000000.0]. The value 0.0 puts each node in its own community of size 1. You can specify a maximum of 500 resolution values. Default: 1.0",
      "datatype": "FLOAT",
      "allowsLists": true,
      "rName": "resolution",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": 1,
      "lowerBound": 1,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the seed to use to create a random number during modularity computation. The seed must be a positive BIGINT value. The function multiplies seed by the hash code of vertex_key to generate a unique seed for each vertex. The default seed is 1. The seed significantly impacts community formation (and modularity score), because the function uses seed for these purposes: \u2022 To break ties between different vertices during community formation \u2022 To determine how deeply to analyze the graph. Deeper analysis of the graph can improve community formation, but can also increase execution time.",
      "description": " Specify the random seed the algorithm uses for repeatable results (for more information, see Nondeterministic Results). The seed must be a LONG value greater than or equal to 1. The algorithm multiplies seed by the hash code of vertex_key to create a unique seed for each vertex. Default: 1 The function also uses seed for these purposes: To break ties between different vertices during community formation To determine when to stop community formation If seed is 1 (default value), community formation continues until the change in modularity score drops below a threshold value. The threshold value is set in the function code; you cannot change it. If seed is set to any other value, community formation continues until the change in modularity score between iterations is 0. This deeper analysis of the graph can improve community formation, but can also increase execution time.",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}