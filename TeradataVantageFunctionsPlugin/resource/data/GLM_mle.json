{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "GLM",
  "function_version": "1.19",
  "function_type": "driver",
  "function_alias_name": "GLM",
  "function_r_name": "aa.glm",
  "short_description": "This function creates a generalized linear model.",
  "long_description": "The generalized linear model (GLM) is an extension of the linear regression model that enables the linear equation to relate to the dependent variables by a link function. The GLM function supports several distribution families and associated link functions. You can input the output table to the function GLMPredict. For more information about generalized linear models, see: Dobson, A.J.; Barnett, A.G. (2008). Introduction to Generalized Linear Models (3rd ed.). Boca Raton, FL: Chapman and Hall/CRC. ISBN 1-58488-165-8. Hardin, James; Hilbe, Joseph (2007). Generalized Linear Models and Extensions (2nd ed.). College Station: Stata Press. ISBN 1-59718-014-9.",
  "outputSchema": {
    "property": "outputSchema",
    "outputId": "standard",
    "instructions": [
      {
        "instruction": "ADD",
        "placement": "end",
        "arguments": [
          {
            "source": "predefined",
            "name": "predictor",
            "dataType": "varchar(1024)",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "estimate",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "std_error",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "p_value",
            "dataType": "double precision",
            "manipulations": []
          },
          {
            "source": "predefined",
            "name": "signficance",
            "dataType": "varchar(50)",
            "manipulations": []
          }
        ]
      },
      {
        "instruction": "CASE",
        "arguments": [
          {
            "condition": [
              {
                "leftOperand": "valueFromParameter(Family)",
                "operator": "=",
                "valueType": "string",
                "rightOperand": "GAUSSIAN"
              }
            ],
            "action": [
              {
                "instruction": "ADD",
                "placement": "before p_value",
                "arguments": [
                  {
                    "source": "predefined",
                    "name": "t_score",
                    "dataType": "double precision not null",
                    "manipulations": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "instruction": "CASE",
        "arguments": [
          {
            "condition": [
              {
                "leftOperand": "valueFromParameter(Family)",
                "operator": "!=",
                "valueType": "string",
                "rightOperand": "GAUSSIAN"
              }
            ],
            "action": [
              {
                "instruction": "ADD",
                "placement": "before p_value",
                "arguments": [
                  {
                    "source": "predefined",
                    "name": "z_score",
                    "dataType": "double precision not null",
                    "manipulations": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the table that contains the columns",
      "description": "Specifies the name of the table that contains the columns",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 3
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "name": "OutputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name for the output table of coefficients. This table must not exist. For GLM, the output is written to the screen, and the output table is the table where the coefficients are stored.",
      "description": "Specify the name for the output table of coefficients. This table must not exist.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "coefficients",
      "useInR": true,
      "rOrderNum": 100,
      "outputSchema": {
        "property": "outputSchema",
        "outputId": "OutputTable",
        "instructions": [
          {
            "instruction": "ADD",
            "placement": "end",
            "arguments": [
              {
                "source": "predefined",
                "name": "attribute",
                "dataType": "integer",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "predictor",
                "dataType": "varchar(1024)",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "category",
                "dataType": "varchar(1024)",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "estimate",
                "dataType": "double precision",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "std_error",
                "dataType": "double precision",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "z_score",
                "dataType": "double precision not null",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "p_value",
                "dataType": "double precision",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "signficance",
                "dataType": "varchar(50)",
                "manipulations": []
              },
              {
                "source": "predefined",
                "name": "family",
                "dataType": "varchar(20)",
                "manipulations": []
              }
            ]
          }
        ]
      }
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "InputColumns"
      ],
      "isRequired": false,
      "rDescription": "Specifies the name of the column that contains the dependent variables (Y) followed by the  names of the columns that contain the predictor variables (Xi), in this format:  'Y,X1,X2,...,Xp'.  By default, the first column of the input table is Y and the remaining input table columns  are Xi, except for the column specified by the Weight argument.",
      "description": "Specifies the name of the column that contains the dependent variables (Y) followed by the  names of the columns that contain the predictor variables (Xi), in this format:  'Y,X1,X2,...,Xp'.  By default, the first column of the input table is Y and the remaining input table columns  are Xi, except for the column specified by the Weight argument.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "input.columns",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -1
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoricalColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies columnname-value pairs, each of which contains the name of a categorical input column and the category values in that column that the function is to include in the model that it generates. Each columnname-value pair has one these forms: 'columnname:max_cardinality' Limits the categories in the column to the max_cardinality most common ones and groups the others together as 'others'. For example, 'column_a:3' specifies that for column_a, the function uses the 3 most common categories and sets the category of the rows that do not belong to those 3 categories to 'others', 'columnname:(category [, ...])' Limits the categories in the column to those that you specify and groups the others together as 'others'. For example, 'column_a : (red, yellow, blue)' specifies that for column_a, the function uses the categories red, yellow, and blue, and sets the category of the rows that do not belong to those categories to 'others'. 'columnname' All category values appear in the model. If you specify the ColumnNames argument, then the columns that you specify in the categorical.columns argument must also appear in the ColumnNames argument.",
      "description": " Specify columnname-value pairs, each of which contains the name of a categorical input column and the category values in that column that the function is to include in the model that it creates. columnname_value_pair Description ' columnname : max_cardinality ' Limits categories in column to max_cardinality to most common ones and groups others together as 'others'. For example, 'column_a:3' specifies that for column_a, function uses 3 most common categories and sets category of rows that do not belong to those 3 categories to 'others'. ' columnname :( category [,...])' Limits categories in column to those that you specify and groups others together as 'others'. For example, 'column_a : (red, yellow, blue)' specifies that for column_a, function uses categories red, yellow, and blue, and sets category of rows that do not belong to those categories to 'others'. ' columnname ' All category values appear in model. If you specify the ColumnNames argument, the columns that you specify in the CategoricalColumns argument must also appear in the ColumnNames argument. Note: For information about columns that you must identify as categorical, see Identification of Categorical Columns.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "categorical.columns",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -2
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "defaultValues": [
        "1.0"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "WeightColumn",
      "alternateNames": [
        "Weight"
      ],
      "isRequired": false,
      "rDescription": "Specifies the name of an input table column that contains the weights to assign to responses. The default value is 1.You can use non-NULL weights to indicate that different observations have different dispersions (with the weights being inversely proportional to the dispersions).Equivalently, when the weights are positive integers wi, each response yi is the mean of wi unit-weight observations. A binomial GLM uses prior weights to give the number of trials when the response is the proportion of successes. A Poisson GLM rarely uses weights. If the weight is less than the response value, then the function throws an exception. Therefore, if the response value is greater than 1 (the default weight), then you must specify a weight that is greater than or equal to the response value.",
      "description": " Specify the name of an input table column that contains the weights to assign to responses. You can use non-NULL weights to indicate that different observations have different dispersions (with the weights being inversely proportional to the dispersions). Equivalently, when the weights are positive integers w i , each response y i is the mean of w i unit-weight observations. A binomial GLM uses prior weights to give the number of trials when the response is the proportion of successes. A Poisson GLM rarely uses weights. If the weight is less than the response value, the function throws an exception. Therefore, if the response value is greater than 1, you must specify a weight that is greater than or equal to the response value. Default behavior: All observations have equal weight.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "weights",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [
        "LOGISTIC",
        "BINOMIAL",
        "POISSON",
        "GAUSSIAN",
        "GAMMA",
        "INVERSE_GAUSSIAN",
        "NEGATIVE_BINOMIAL"
      ],
      "defaultValue": "BINOMIAL",
      "rDefaultValue": "gaussian",
      "isOutputColumn": false,
      "name": "Family",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the distribution exponential family",
      "description": " Specify the distribution exponential family, which is one of the following: 'BINOMIAL' (Default) 'LOGISTIC' (equivalent to 'BINOMIAL') 'POISSON' 'GAUSSIAN' 'GAMMA' 'INVERSE_GAUSSIAN' 'NEGATIVE_BINOMIAL'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "family",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "permittedValues": [
        "CANONICAL",
        "IDENTITY",
        "INVERSE",
        "LOG",
        "COMPLEMENTARY_LOG_LOG",
        "SQUARE_ROOT",
        "INVERSE_MU_SQUARED",
        "LOGIT",
        "PROBIT",
        "CAUCHIT"
      ],
      "defaultValue": "CANONICAL",
      "isOutputColumn": false,
      "name": "LinkFunction",
      "alternateNames": [
        "Link"
      ],
      "isRequired": false,
      "rDescription": "The default value is 'CANONICAL'. The canonical link functions (default link functions) and the link functions that are allowed.",
      "description": " Specify the link function. Default: 'CANONICAL'. The canonical link functions (default link functions) and the link functions that are allowed for each exponential family are listed in the tables in Supported Family/Link Function Combinations.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "linkfunction",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "defaultValue": 0.01,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "StopThreshold",
      "alternateNames": [
        "Threshold"
      ],
      "isRequired": false,
      "rDescription": "Specify the convergence threshold. The default value is 0.01.",
      "description": " Specify the convergence threshold. Default: 0.01",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "threshold",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 25,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxIterNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum number of iterations that the algorithm runs before quitting if the convergence threshold has not been met. The default value is 25.",
      "description": " Specify the maximum number of iterations that the algorithm runs before quitting if the convergence threshold has not been met. The parameter max_iterations must be a positive INTEGER value. Default: 25",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "maxit",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": true,
      "name": "Intercept",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the function uses an intercept. For example, in \u00df0+\u00df1*X1+\u00df2*X2+ ....+\u00dfpXp, the intercept is \u00df0. The default value is 'true'.",
      "description": " Specify whether the function uses an intercept. For example, in \u00df0+\u00df1*X1+\u00df2*X2+ ....+ \u00dfpXp, the intercept is \u00df0. Default: 'true'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "intercept",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": false,
      "name": "Step",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the function uses a step. The default value is false. If the function uses a step, then it runs with the GLM model that has the lowest Akaike information criterion (AIC) score, drops one predictor from the current predictor group, and repeats this process until no predictor remains.",
      "description": " Specify whether the function uses a step. If the function uses a step, it runs with the GLM model that has the lowest Akaike information criterion (AIC) score, drops one predictor from the current predictor group, and repeats this process until no predictor remains. Default: 'false'",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "step",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}
