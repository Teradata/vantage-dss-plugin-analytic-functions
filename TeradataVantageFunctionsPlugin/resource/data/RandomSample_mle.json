{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "RandomSample",
  "function_version": "1.4",
  "function_type": "driver",
  "function_alias_name": "RandomSample",
  "function_r_name": "aa.random.sample",
  "short_description": "This function samples a table and returns a fixed number of rows.",
  "long_description": "The RandomSample function takes a data set and uses a specified sampling method to output one or more random samples. Each sample has exactly the number of rows specified. The RandomSample function is useful for creating test sets, training sets, and initial centers for clustering algorithms. In addition to the default basic sampling, in which each input table row has a probability of being selected that is proportional to its weight, this function provides two alternate methods, KMeans++ and KMeans||, which are designed for creating a set of initial seeds for the function KMeans.",
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the table that contains the data set from which to take samples.",
      "description": "Specifies the name of the table that contains the data set from which to take samples.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "WeightColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the input_table column that contains weights for weighted sampling. The weight_column must have a numeric SQL data type. By default, rows have equal weight.",
      "description": " Specify the name of the input_table column that contains weights for weighted sampling. The weight_column must have a numeric SQL data type. Default behavior: Rows have equal weight.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "weight.column",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "InputColumns"
      ],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the names of the input_table columns to use to calculate the distance between numerical variables.",
      "description": "For KMeans++ and KMeans|| sampling, specifies the names of the input_table columns to use to calculate the distance between numerical variables.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "input.columns",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NumericAsCategorical",
      "alternateNames": [
        "AsCategories"
      ],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the names of the input_table columns that contain numerical variables to treat as categorical variables.",
      "description": "For KMeans++ and KMeans|| sampling, specifies the names of the input_table columns that contain numerical variables to treat as categorical variables.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "as.categories",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "GROUPTYPE"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SeedColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " Specifies the names of the input_table columns by which to partition the input. Function calls that use the same input data, seed, and seed_column output the same result. If you specify seed.column, you must also specify seed. Note: Ideally, the number of distinct values in the seed_column is the same as the number of workers in the cluster. A very large number of distinct values in the seed_column degrades function performance.",
      "description": " Specify the names of the input_table columns by which to partition the input. Function calls that use the same input data, seed , and seed_column output the same result. Note: If you specify SeedColumn, you must also specify Seed. Note: Ideally, the number of distinct values in the seed_column is the same as the number of workers in the cluster. A large number of distinct values in the seed_column degrades function performance.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "seed.column",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "lowerBound": 0,
      "lowerBoundType": "EXCLUSIVE",
      "allowNaN": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NumSample",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies both the number of samples and their sizes. For each sample_size (an INTEGER value), the function selects a sample that has sample_size rows.",
      "description": "Specify both the number of samples and their sizes. For each sample_size (an INTEGER value), the function selects a sample that has sample_size rows.",
      "datatype": "INTEGER",
      "allowsLists": true,
      "rName": " num.sample",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "permittedValues": [
        "Basic",
        "KMeans++",
        "KMeans||"
      ],
      "defaultValue": "Basic",
      "isOutputColumn": false,
      "name": "SamplingMode",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the sampling mode: 'basic' (default): Each input_table row has a probability of being selected that is proportional to its weight. The weight of each row is in weight_column.  'kmeans++': One row is selected in each of k iterations, where k is the number of desired output rows. The first row is selected randomly. In subsequent iterations, the probability of a row being selected is proportional to the value in the weight.column multiplied by the distance from the nearest row in the set of selected rows. The distance is calculated using the methods specified by the distance and categorical.distance arguments.  'kmeans||': Enhanced version of ta.kmeans++ that exploits parallel architecture to accelerate the sampling process. The algorithm is described in the paper Scalable ta.kmeans++ by Bahmani et al (http://theory.stanford.edu/~sergei/papers/vldb12-kmpar.pdf). Briefly, at each iteration, the probability that a row is selected is proportional to the value in the weight.column multiplied by the distance from the nearest row in the set of selected rows (as in ta.kmeans++). However, the ta.kmeans|| algorithm oversamples at each iteration, significantly reducing the required number of iterations; therefore, the resulting set of rows might have more than k data points. Each row in the resulting set is then weighted by the number of rows in the table that are closer to that row than to any other selected row, and the rows are clustered to produce exactly k rows. Tip: For optimal performance, use 'kmeans++' when the desired sample size is less than 15 and 'kmeans||' otherwise.",
      "description": " Specify the sampling mode: Option Description 'basic' (Default) Each input_table row has a probability of being selected that is proportional to its weight. Weight of each row is in weight_column . 'kmeans++' One row is selected in each of k iterations, where k is number of desired output rows. First row is selected randomly. In subsequent iterations, probability of row being selected is proportional to value in WeightColumn multiplied by distance from nearest row in set of selected rows. Distance is calculated using methods specified by Distance and CategoricalDistance arguments. 'kmeans||' Enhanced version of KMeans++ that exploits parallel architecture to accelerate sampling process. Algorithm is described in paper Scalable K-Means++ by Bahmani et al (http://theory.stanford.edu/~sergei/papers/vldb12-kmpar.pdf). At each iteration, probability that a row is selected is proportional to value in WeightColumn multiplied by distance from nearest row in set of selected rows (as in KMeans++). However, KMeans|| algorithm oversamples at each iteration, significantly reducing required number of iterations; therefore, resulting set of rows might have more than k data points. Each row in resulting set is then weighted by number of rows in table that are closer to that row than to any other selected row, and rows are clustered to produce exactly k rows. Tip: For optimal performance, use 'kmeans++' when the desired sample size is less than 15 and 'kmeans||' otherwise.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "sampling.mode",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [
        "MANHATTAN",
        "EUCLIDEAN"
      ],
      "defaultValue": "EUCLIDEAN",
      "isOutputColumn": false,
      "name": "Distance",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the function for computing the distance between numerical variables:  'euclidean' (default): The distance between two variables is defined in 'Euclidean Distance', 'manhattan': The distance beween two variables is defined in 'Manhattan Distance'  ",
      "description": " For KMeans++ and KMeans|| sampling, specify the function for computing the distance between numerical variables.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "distance",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [
        "OVERLAP",
        "HAMMING"
      ],
      "defaultValue": "OVERLAP",
      "isOutputColumn": false,
      "name": "CategoricalDistance",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the function for computing the distance between categorical variables:  'overlap' (default): The distance between two variables is 0 if they are the same and 1 if they are different.  'hamming': The distance beween two variables is the Hamming distance between thestrings that represent them. The strings must have equal length.",
      "description": " For KMeans++ and KMeans|| sampling, specify the function for computing the distance between categorical variables: Option Description 'overlap' (Default) Distance between two variables is 0 if they are the same, 1 if they are different. 'hamming' Distance between two variables is Hamming distance between strings that represent them. Strings must have equal length.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "categorical.distance",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "allowNaN": true,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoryWeights",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the weights (DOUBLE PRECISION values) of the categorical variables, including those that the as.categories argument specifies. Specify the weights in the order (from left to right) that the variables appear in the input table. When calculating the distance between two rows, distances between categorical values are scaled by these weights.",
      "description": " For KMeans++ and KMeans|| sampling, specify the weights (DOUBLE PRECISION values) of the categorical variables, including those that the AsCategories argument specifies. Specify the weights in the order (from left to right) that the variables appear in the input table. When calculating the distance between two rows, distances between categorical values are scaled by these weights. Default behavior: All categories have equal weight.",
      "datatype": "DOUBLE",
      "allowsLists": true,
      "rName": "category.weights",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "lowerBound": -9223372036854775808,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the random seed with which to initialize the algorithm (a LONG value). If you specify Seed, you must also specify SeedColumn.",
      "description": " Specify the random seed the algorithm uses for repeatable results (for more information, see Nondeterministic Results). The seed must be a LONG value. Note: If you specify Seed, you must also specify SeedColumn.",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "defaultValue": 1,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "OverSamplingRate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans|| sampling, specifies the oversampling rate (a DOUBLE PRECISION value greater than 0.0). The function multiplies rate by sample_size (for each sample_size). The default rate is 1.0.",
      "description": " For KMeans|| sampling, specifies the oversampling rate (a positive DOUBLE PRECISION value). The function multiplies rate by sample_size (for each sample_size ). Default: 1.0",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "over.sampling.rate",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "defaultValue": 5,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "IterNum",
      "alternateNames": [
        "IterationNum"
      ],
      "isRequired": false,
      "rDescription": "For ta.kmeans|| sampling, specifies the number of iterations (an INTEGER value greater than 0). The default number_of_iterations is 5.",
      "description": "For KMeans|| sampling, specifies the number of iterations (an INTEGER value greater than 0). The default number_of_iterations is 5.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "iteration.num",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "defaultValue": true,
      "name": "SetIdAsFirstColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the generated set_id values to be included as first column in output. The default value is 'true'.",
      "description": "Specifies whether the generated set_id values to be included as first column in output. The default value is 'true'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "setid.as.first.column",
      "useInR": true,
      "rOrderNum": 14
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}