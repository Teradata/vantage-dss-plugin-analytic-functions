{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "Burst",
  "function_version": "2.5",
  "function_type": "non-driver",
  "function_alias_name": "Burst",
  "function_r_name": "aa.burst",
  "short_description": "It is used to split the time series into multiple contiguous intervals of given length.",
  "long_description": "The Burst function bursts (splits) a time interval into a series of shorter \"burst\" intervals and allocates values from the time intervals into the new, shorter subintervals. The Burst function is useful for allocating values from overlapping time intervals into user-defined time intervals (for example, when a cable company has customer data from overlapping time intervals, which it wants to analyze by dividing into uniform time intervals). The Burst function supports several allocation methods. The burst intervals can have either the same length (specified by the TimeInterval argument), the same number of data points (specified by the NumPoints argument), or specific start and end times (specified by time_table).",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [
        "input_table"
      ],
      "isRequired": true,
      "rDescription": "Specifies the table name which contains time series",
      "description": "Specifies the table name which contains time series",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "TimeIntervalTable",
      "alternateNames": [
        "time_table"
      ],
      "isRequired": false,
      "rDescription": "Specifies the table name which contains time.",
      "description": "Specifies the table name which contains time.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "time.data",
      "useInR": true,
      "rOrderNum": 2
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input_table"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TimeColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the input_table columns that contain the start and end times of the time interval to be burst.",
      "description": "Specify the names of the input_table columns that contain the start and end times of the time interval to be burst.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "time.column",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "input_table"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetColumns",
      "alternateNames": [
        "ValueColumns"
      ],
      "isRequired": true,
      "rDescription": "Specifies the names of input_table columns to copy to the output table.",
      "description": "Specify the names of input_table columns to copy to the output table.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "value.columns",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "targetTable": [
        "input_table"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of input_table columns (other than those specified by time.column and value.columns) to copy to the output table. By default, the function copies to the output table only the columns specified by time.column and value.columns.",
      "description": " Specify the names of input_table columns (other than those specified by TimeColumn and TargetColumns) to copy to the output table. Default behavior: The function copies to the output table only the columns specified by TimeColumn and TargetColumns.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 15
    },
    {
      "lowerBound": 0.0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "TimeInterval",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the length of each burst time interval. This value must be either INTEGER or DOUBLE PRECISION. Note: Specify exactly one of time_table, time.interval, or num.points.",
      "description": " Specify exactly one of time_table, TimeInterval, or NumPoints. Specify the length of each burst time interval. This value must be either INTEGER or DOUBLE PRECISION.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "time.interval",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "TimeDataType",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the data type of the output columns that correspond to the input table columns that time.column specifies (start_time_column and end_time_column). If you omit this argument, then the function infers the data type of start_time_column and end_time_column from the input table and uses the inferred data type for the corresponding output table columns. If you specify this argument, then the function can transform the input data to the specified output data type only if both the input column data type and the specified output column data type are in this list: INTEGER, BIGINT, SMALLINT, DOUBLE PRECISION, DECIMAL(n,n), DECIMAL, NUMERIC, NUMERIC(n,n)",
      "description": " Specify the data type of the output columns that correspond to the input table columns that TimeColumn specifies ( start_time_column and end_time_column ). If you omit this argument, the function infers the data type of start_time_column and end_time_column from the input table and uses the inferred data type for the corresponding output table columns. If you specify this argument, the function can transform the input data to the specified output data type only if both the input column data type and the specified output column data type are in this list: INTEGER BIGINT SMALLINT DOUBLE PRECISION NUMERIC NUMERIC( n [, m ])",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "time.datatype",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ValueDataType",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the data types of the output columns that correspond to the input table columns that value.columns specifies. If you omit this argument, then the function infers the data type of each value_column from the input table and uses the inferred data type for the corresponding output table column. If you specify value.data.type, then it must be the same size as value.columns. That is, if value.columns specifies n columns, then value.datatype must specify n data types. For i in [1, n], value_column_i has value_type_i. However, value_type_i can be empty; for example: value.columns (c1, c2, c3), value.datatype (INTEGER, ,VARCHAR) If you specify this argument, then the function can transform the input data to the specified output data type only if both the input column data type and the specified output column data type are in this list: INTEGER, BIGINT, SMALLINT, DOUBLE PRECISION, DECIMAL(n,n), DECIMAL, NUMERIC, NUMERIC(n,n)",
      "description": " Specify the data types of the output columns that correspond to the input table columns that TargetColumns specifies. If you omit this argument, the function infers the data type of each target_column from the input table and uses the inferred data type for the corresponding output table column. If you specify ValueDataType, it must be the same size as TargetColumns. That is, if TargetColumns specifies n columns, ValueDataType must specify n data types. For i in [1, n ], value_column_i has value_type_i . However, value_type_i can be empty; for example: If you specify this argument, the function can transform the input data to the specified output data type only if both the input column data type and the specified output column data type are in this list: INTEGER BIGINT SMALLINT DOUBLE PRECISION NUMERIC NUMERIC( n [, m ])",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "value.datatype",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "StartTime",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the start time for the time interval to be burst. The default is the value in start_time_column.",
      "description": " Specify the start time for the time interval to be burst. Default: value in start_time_column",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "start.time",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "EndTime",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the end time for the time interval to be burst. The default is the value in end_time_column.",
      "description": " Specify the end time for the time interval to be burst. Default: value in end_time_column",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "end.time",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "permittedValues": [
        "nosplit",
        "proportional",
        "random",
        "gaussian",
        "poisson"
      ],
      "defaultValue": "nosplit",
      "isOutputColumn": false,
      "name": "SplitCriteria",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the Split criteria of the Value Columns",
      "description": " Specify how to split target_column values into subintervals: Option Description 'nosplit' (Default) The function assigns to each subinterval the sum of the values in the rows in that interval. See Burst Example 1: TimeInterval, SplitCriteria ('nosplit') and Burst Example 4: Time_Table File (where SplitCriteria defaults to 'nosplit'). 'proportional' The function does the following: Determines the number of subintervals for each row. Divides the target_column values evenly across all subintervals. Adds the contributions from all rows to each subinterval. See Burst Example 2: TimeTable, SplitCriteria ('proportional'). 'random' The function does the following: Determines the number of subintervals for each row. Draws x i for each subinterval i . The distribution is uniform on (0,1). The value assigned to each subinterval except the last is: where Value is the value of the input table for that row. The value assigned to the last subinterval is: Adds the contributions from all rows to each subinterval. 'gaussian' The function does the following: Determines the number of subintervals for each row. Draws x i for each subinterval i . The distribution is a standard normal distribution. The value assigned to each subinterval except the last, and the value assigned to the last subinterval, are calculated with the equations shown for 'random'. Adds the contributions from all rows to each subinterval. See Burst Example 3: TimeTable, SplitCriteria ('gaussian'). 'poisson' Note: Use 'poisson' only if the means of each target_column is nonnegative. For data sets with an expected mean value greater than 40, Teradata recommends selecting 'gaussian' instead of 'poisson'. The performance of the 'poisson' option decreases as the mean of the dataset increases. The function does the following: Determines the number of subintervals for each row. Draws x i for each subinterval i . The distribution is a Poisson distribution with mean: Value / number_of_subintervals Each subinterval is assigned this value: Adds the contributions from all rows to each subinterval.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "split.criteria",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "NumPoints",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of data points in each burst time interval.This value must be an INTEGER. Note: Specify exactly one of time_table, time.interval, or num.points.",
      "description": " Specify exactly one of time_table, TimeInterval, or NumPoints. Specify the number of data points in each burst time interval. This value must be an INTEGER.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "num.points",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the seed for the random number generator.",
      "description": " Use only if SplitCriteria is 'random' or 'gaussian'. Specify the value for initializing the random number generator the algorithm uses for repeatable results (for more information, see Nondeterministic Results). Default: 0",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 14
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ValuesBeforeFirst",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the values to use if start_time is before start_time_column. Each of these values must have the same data type as its corresponding value_column. Values of data typeVARCHAR are case-insensitive. If you specify values.before.first, then it must be the same size as ValueColumns. That is, if value.columns specifies n columns, then values.before.first must specify n values. For i in [1, n], value_column_i has the value before_first_value_i. However, before_first_value_i can be empty; for example: value.columns (c1, c2, c3), values.before.first (1, ,'abc') If before_first_value_i is empty, then value_column_i has the value NULL. If you do not specify values.before.first, then value_column_i has the value NULL for i in [1, n].",
      "description": " Specify the values to use if start_time is before start_time_column . Each of these values must have the same data type as its corresponding target_column . Values of data type VARCHAR are case-insensitive. If you specify ValuesBeforeFirst, it must be the same size as TargetColumns. That is, if TargetColumns specifies n columns, ValuesBeforeFirst must specify n values. For i in [1, n ], value_column_i has the value before_first_value_i . However, before_first_value_i can be empty; for example: If before_first_value_i is empty, value_column_i has the value NULL. Default: value_column_i has the value NULL for i in [1, n ].",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "values.before.first",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ValuesAfterLast",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the values to use if end_time is after end_time_column. Each of these values must have the same data type as its corresponding value_column. Values of data type VARCHAR are case-insensitive. If you specify ValuesAfterLast, then it must be the same size as value.columns. That is, if value.columns specifies n columns, then ValuesAfterLast must specify n values. For i in [1, n], value_column_i has the value after_last_value_i. However, after_last_value_i can be empty; for example:value.columns (c1, c2, c3), values.after.last (1, ,'abc') If after_last_value_i is empty, then value_column_i has the value NULL. If you do not specify Values_After_Last, then value_column_i has the value NULL for i in [1, n].",
      "description": " Specify the values to use if end_time is after end_time_column . Each of these values must have the same data type as its corresponding target_column . Values of data type VARCHAR are case-insensitive. If you specify ValuesAfterLast, it must be the same size as TargetColumns. That is, if TargetColumns specifies n columns, ValuesAfterLast must specify n values. For i in [1, n ], value_column_i has the value after_last_value_i . However, after_last_value_i can be empty; for example: If after_last_value_i is empty, value_column_i has the value NULL. Default: value_column_i has the value NULL for i in [1, n ].",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "values.after.last",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}