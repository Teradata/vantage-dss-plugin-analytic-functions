{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "IdentityMatch",
  "function_version": "1.10",
  "function_type": "non-driver",
  "function_alias_name": "IdentityMatch",
  "function_r_name": "aa.identity.match",
  "short_description": "SQL/MR function to match the identities",
  "long_description": "The IdentityMatch function tries to match source data with reference data, using specified attributes to calculate the similarity score of each source-reference pair, and then computes the final similarity score. Typically, the source data is about business customers and the reference data is from external sources, such as online forums and social networking services. The IdentityMatch function is designed to help determine if customers with similar identifiers are the same customer. The function supports both nominal (exact) matching and weighted fuzzy matching.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByAny",
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "SourceTable",
      "alternateNames": [
        "a"
      ],
      "isRequired": true,
      "rDescription": "Source input",
      "description": "Source input",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "a",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey",
        "Dimension"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "ReferenceTable",
      "alternateNames": [
        "b"
      ],
      "isRequired": true,
      "rDescription": "Reference input",
      "description": "Reference input",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "b",
      "useInR": true,
      "rOrderNum": 2
    }
  ],
  "argument_clauses": [
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "IdColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the columns in the source and reference input tables that contain row identifiers. The function copies these columns to the output table.",
      "description": "Specify the names of the columns in the source and reference input tables that contain row identifiers. The function copies these columns to the output table.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "id.column",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NominalMatchColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "specifies pairs of columns (attributes) to check for exact matching (a.columnx and b.columny are column names). if any pair matches exactly, then their records are considered to be exact matches. *required if you omit fuzzymatchcolumns.",
      "description": "[Required if you omit FuzzyMatchColumns.] Specify pairs of columns (attributes) to check for exact matching (a. columnX and b. columnY are column names). If any pair matches exactly, their records are considered exact matches, and the function does not compare the fuzzy match attributes.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "nominalmatch.columns",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "FuzzyMatchColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies pairs of columns (attributes) to check for fuzzy matching (a.columnX and b.columnY are column names) and the fuzzy matching parameters match_metric, match_weight, and synonym_file (whose descriptions follow). If any pair is a fuzzy match, then their records are considered to be fuzzy matches. *Required if you omit nominalmatch.columns.The parameter match_metric specifies the similarity metric, which is a function that returns the similarity score of two strings (a value between 0 and 1). The possible values of match_metric are: EQUAL: If strings a and b are equal, then their similarity score is 1.0; otherwise it 0.0, LD: The similarity score of strings a and b is f(a,b)=LD(a,b)/max(len(a),len(b)), where LD(a,b) is the Levenshtein distance between a with b, D-LD: Like LD except that LD is the Damerau\u2013Levenshtein distance between a with b, JARO: The similarity score of strings a and b is the Jaro distance between them, JARO-WINKLER: The similarity score of strings a and b is the Jaro-Winkler distance between them, NEEDLEMAN-WUNSCH: The similarity score of strings a and b is the Needleman-Wunsch distance between them, JD: The similarity score of strings a and b is the Jaccard distance between them. The function converts the strings a and b to sets s and t by splitting them by space and then uses the formula f(s,t)=|s\u2229t|/|s\u222at|, COSINE: The similarity score of strings a and b is calculated with their term frequency\u2013inverse document frequency (ta.tf_idf) and cosine similarity. Note: The function calculates IDF only on the input relation stored in memory. The parameter match_weight specifies the weight (relative importance) of the attribute represented by a.columnX and b.columnY. The match_weight must be a positive number. The function normalizes each match_weight to a value in the range [0, 1]. Given match_weight values, w1, w2, ..., wn, the normalized value of wi is: wi /(w1+w2+ ...+ wn) For example, given two pairs of columns, whose match weights are 3 and 7, the function uses the weights 3/(3+7)=0.3 and 7/(3+7)=0.7 to compute the similarity score. The parameter synonym_file specifies the dictionary that the function uses to check the two strings for semantic equality. In the dictionary, each line is a commaseparated list of synonyms. Note: You must install the dictionary before running the function.",
      "description": "[Required if you omit NominalMatchColumns.] Specify pairs of columns (attributes) to check for fuzzy matching (a. columnX and b. columnY are column names) and fuzzy matching parameters. If any pair is a fuzzy match, their records are considered fuzzy matches, and the function reports the similarity score of these attributes. Fuzzy matching parameters: match_metric Specify the similarity metric, which is a function that returns the similarity score of two strings (a value between 0 and 1), as follows: match_metric Similarity Score EQUAL 1.0 if strings a and b are equal; otherwise 0.0. LD LD(a,b)/max(len(a),len(b)), where LD(a,b) is the Levenshtein distance between a and b. D-LD LD(a,b)/max(len(a),len(b)), where LD(a,b) is the Damerau-Levenshtein distance between a and b. JARO Jaro distance between a and b. JARO-WINKLER Jaro-Winkler distance between a and b. NEEDLEMAN-WUNSCH Needleman-Wunsch distance between a and b. JD Jaccard distance between a and b. The function converts the strings a and b to sets s and t by splitting them by space and then uses the formula f(s,t)=|s\u2229t|/|s\u222at|. COSINE Calculated with term frequency-inverse document frequency (TF-IDF) and cosine similarity of a and b. Note: The function calculates IDF only on the input relation stored in memory. match_weight Specify the weight (relative importance) of the attribute represented by a. columnX and b. columnY . The match_weight must be a positive number. The function normalizes each match_weight to a value in the range [0,\u00a01]. Given match_weight values, w 1 , w 2 , ..., w n , this is the formula for the normalized value of w i : w i /( w 1 +w 2 + ...+ w n ) For example, given two pairs of columns, whose match weights are 3 and 7, the function uses the weights 3/(3+7)=0.3 and 7/(3+7)=0.7 to compute the similarity score. synonym_file Specify the dictionary in which the function checks the two strings for semantic equality. In the dictionary, each line is a comma-separated list of synonyms. Default behavior: The function does not use a dictionary. Note: You must install the dictionary on the ML Engine before running the function.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "fuzzymatch.columns",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 0.5,
      "lowerBound": 0.0,
      "upperBound": 1.0,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "ThresholdScore",
      "alternateNames": [
        "Threshold"
      ],
      "isRequired": false,
      "rDescription": "Specifies the threshold similarity score, a DOUBLE PRECISION value between 0 and 1. The default value is 0.5. The function outputs only the records whose similarity score exceeds threshold.",
      "description": " Specify the threshold similarity score, a DOUBLE PRECISION value between 0 and 1. The function outputs only the records whose similarity score exceeds threshold . The higher the threshold , the higher the matching accuracy. Default: 0.5",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "threshold",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies input table columns to copy to the output table.",
      "description": " Specify input table columns to copy to the output table.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}
