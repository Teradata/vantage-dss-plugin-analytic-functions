{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "XMLRelation",
  "function_version": "1.9",
  "function_type": "non-driver",
  "function_alias_name": "XMLRelation",
  "function_r_name": "aa.xml.relation",
  "short_description": "Implements the XMLRlation SQL/MR function.",
  "long_description": "The XMLRelation function takes XML documents and outputs their element names, attribute values, text, and structural information in a relational table, which you can search with SQL queries. The function maintains multilevel paths from the input XML documents to the XML elements.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByAny"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The input table that contains XML documents. ",
      "description": "The input table that contains XML documents. ",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [
        "bytea"
      ],
      "allowedTypeGroups": [
        "STRING"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TextColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the XML documents. The function skips malformed XML documents.",
      "description": "Specify the name of the input table column that contains the XML documents. The function skips malformed XML documents.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "text.column",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "DocIdColumns",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the input table columns that contain the identifiers of the XML documents. No docid_column can have the same name as an output table column.",
      "description": "Specify the names of the input table columns that contain the identifiers of the XML documents. No docid_column can have the same name as an output table column. For output column names, see XMLRelation Output.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "doc.id.columns",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "input"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of input column names to copy to the output table. No accumulate_column can have the same name as an output table column.",
      "description": " Specify the names of input column names to copy to the output table. No accumulate_column can have the same name as an output table column. For output column names, see XMLRelation Output.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "defaultValue": 5,
      "lowerBound": 0,
      "upperBound": 1000,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxDepth",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum depth in the XML tree at which to process XML documents. The max.depth and output arguments determine the schema of the output table, and the number of columns in the output table must not exceed 1600. The default value is 5.",
      "description": " Specify the maximum depth in the XML tree at which to process XML documents. The MaxDepth and OutputType arguments determine the schema of the output table. Default: 5 Maximum: 1000",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.depth",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "defaultValue": false,
      "name": "AttributeAsNode",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether to treat the attributes of a node as its child nodes. The default value is 'false' (attributes of a node are stored in one element of the output tuple).",
      "description": " Specify whether to treat the attributes of a node as its child nodes. Default: 'false' (Attributes of a node are stored in one element of the output tuple.)",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "attribute.as.node",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "defaultValue": ",",
      "isOutputColumn": false,
      "name": "AttributeDelimiter",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the delimiter used to separate multiple attributes of one node in XML documents. The default value is a comma ','.",
      "description": " Specify the delimiter used to separate multiple attributes of one node in XML documents. Default: ',' (comma)",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "attribute.delimiter",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ExcludeElements",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the paths to the nodes to exclude from processing. The function excludes each specified node and its child nodes. Examples of paths to nodes are:  'chapter'  'root/book' 'root/book/{author,chapter}'",
      "description": " Specify the paths to the nodes to exclude from processing. The function excludes each specified node and its child nodes. Here are examples of paths to nodes:'chapter''root/book''root/book/{author,chapter}'",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "exclude.elements",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [
        "fulldata",
        "parentchild",
        "fullpath"
      ],
      "defaultValue": "fullpath",
      "isOutputColumn": false,
      "name": "OutputType",
      "alternateNames": [
        "Output"
      ],
      "isRequired": false,
      "rDescription": "Specifies the output table schema. The max.depth and output arguments determine the schema of the output table, and the number of columns in the output table must not exceed 1600. The default value is 'fullpath'.",
      "description": " Specify the output table schema. The MaxDepth and OutputType arguments determine the schema of the output table, and the number of columns in the output table must not exceed 1600. Default: 'fullpath'",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "output",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "permittedValues": [],
      "defaultValue": "false",
      "isOutputColumn": false,
      "name": "ErrorHandler",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the function handles errors that occur when parsing an XML document. The default value is 'false' (the function aborts and throws an exception). If you specify 'true':  If an error occurs while parsing a row, the function skips that row. When the function completes the parsing, it outputs only the nodes that were error-free.  You can tell the function to output an additional column named output_column_name and populate it with the values of the specified columns. In the output column, the values of the specified columns are separated with semicolons. For example, the following argument adds the column error_info to the output table and populates it with the values of input columns col1 and col2 (with a semicolon after each value): error.handler('true;error_info:col1,col2') The default output_column_name is error.handler.",
      "description": " Specify whether the function handles errors that occur when parsing an XML document. If you specify 'true': If an error occurs while parsing a row, the function skips that row. When the function completes the parsing, it outputs only the nodes that were error-free. You can tell the function to output an additional column named output_column and populate it with the values of the specified columns. The name output_column can contain only lowercase letters and underscores. Default: errorhandler In the output column, the values of the specified columns are separated with semicolons. For example, the following argument adds the column error_info to the output table and populates it with the values of input columns col1 and col2 (with a semicolon after each value): Default: 'false' (The function aborts and throws an exception.)",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "error.handler",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "UniqueId",
      "alternateNames": [
        "SequenceInputBy"
      ],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}