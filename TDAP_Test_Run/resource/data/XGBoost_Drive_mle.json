{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "XGBoost_Drive",
  "function_version": "2.5",
  "function_type": "driver",
  "function_alias_name": "XGBoost",
  "function_r_name": "aa.xgboost.drive",
  "short_description": "XGBoost is a driver function to build a gradient boost model",
  "long_description": "XGBoost function takes the entire data set as training input and builds a strong classifier from an ensemble of weak classifiers.",
  "input_tables": [
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the table containing the input data set.",
      "description": "Specifies the table containing the input data set.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "AttributeTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Name of the table containing the features in the input data. Required for sparse data format",
      "description": "Name of the table containing the features in the input data. Required for sparse data format",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "attribute.table",
      "useInR": true,
      "rOrderNum": 14
    }
  ],
  "output_tables": [
    {
      "isOutputTable": true,
      "defaultValue": "xgboost_model",
      "name": "OutputTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the output table in which the function stores the predictive model it generates.",
      "description": "Specifies the name of the output table in which the function stores the predictive model it generates.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "model.table",
      "useInR": true,
      "rOrderNum": 100
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ResponseColumn",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the response table column that contains the responses (labels) of the data.",
      "description": "Specifies the name of the response table column that contains the responses (labels) of the data.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "response.column",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": 0
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NumericInputs",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the columns that contain the numeric predictor variables (which must be numeric values).",
      "description": "Specifies the names of the columns that contain the numeric predictor variables (which must be numeric values).",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "numeric.inputs",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -1
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoricalInputs",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the columns that contain the categorical predictor variables (which can be either numeric or VARCHAR values). Each categorical input column can have at most max_cat_values distinct categorical values. If max_cat_values exceeds 20, the function might run out of memory, because classification trees grow rapidly as max_cat_values increases.",
      "description": "Specifies the names of the columns that contain the categorical predictor variables (which can be either numeric or VARCHAR values). Each categorical input column can have at most max_cat_values distinct categorical values. If max_cat_values exceeds 20, the function might run out of memory, because classification trees grow rapidly as max_cat_values increases.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "categorical.inputs",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -2
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "IdColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the partitioning column of input table. This column is used as a row identifier to distribute data among different vworkers for parallel boosted trees. ",
      "description": "Specifies the name of the partitioning column of input table. This column is used as a row identifier to distribute data among different vworkers for parallel boosted trees. ",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "id.column",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "AttributeNameColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Required for sparse data format, if the data set is in sparse format, this argument indicates the column containing the attributes in the input table",
      "description": "Required for sparse data format, if the data set is in sparse format, this argument indicates the column containing the attributes in the input table",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "attribute.name.column",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "AttributeValueColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "If the data is in the sparse format, this argument indicates the column containing the attribute values in the input table",
      "description": "If the data is in the sparse format, this argument indicates the column containing the attribute values in the input table",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "attribute.value.column",
      "useInR": true,
      "rOrderNum": 15
    },
    {
      "lowerBound": 1,
      "upperBound": 100,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "NumBoostedTrees",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of boosted trees to be trained. By default, the number of boosted trees equals the number of vworkers available for the functions.",
      "description": "Specifies the number of boosted trees to be trained. By default, the number of boosted trees equals the number of vworkers available for the functions.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "num.boosted.trees",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "permittedValues": [
        "BINOMIAL",
        "SOFTMAX"
      ],
      "defaultValue": "SOFTMAX",
      "isOutputColumn": false,
      "name": "LossFunction",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "loss function",
      "description": "loss function",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "loss.function",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [
        "CLASSIFICATION"
      ],
      "defaultValue": "CLASSIFICATION",
      "isOutputColumn": false,
      "name": "PredictionType",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "prediction type",
      "description": "prediction type",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "prediction.type",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "defaultValue": 1,
      "lowerBound": -Infinity,
      "upperBound": 100000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "RegularizationLambda",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "regularization",
      "description": "regularization",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "reg.lambda",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 0.1,
      "lowerBound": 0,
      "upperBound": 1.0,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "ShrinkageFactor",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "shrinkage factor",
      "description": "shrinkage factor",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "shrinkage.factor",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": 1.0,
      "lowerBound": 0,
      "upperBound": 1.0,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "ColumnSubSampling",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "column subsampling",
      "description": "column subsampling",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "column.subsampling",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "defaultValue": 10,
      "lowerBound": 1,
      "upperBound": 100000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "IterNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of iterations to boost the weak classifiers, which is also the number of weak classifiers in the ensemble (T). The number must an INTEGER in the range [1, 100000]. The default value is 10.",
      "description": "Specifies the number of iterations to boost the weak classifiers, which is also the number of weak classifiers in the ensemble (T). The number must an INTEGER in the range [1, 100000]. The default value is 10.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "iter.num",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "defaultValue": 1,
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MinNodeSize",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the minimum size of any particular node within each decision tree. The min_node_size must an INTEGER. The default value is 100.",
      "description": "Specifies the minimum size of any particular node within each decision tree. The min_node_size must an INTEGER. The default value is 100.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "min.node.size",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": 12,
      "lowerBound": 1,
      "upperBound": 100000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxDepth",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum depth of the tree. The max_depth must an INTEGER in the range [1, 100000]. The default value is 12.",
      "description": "Specifies the maximum depth of the tree. The max_depth must an INTEGER in the range [1, 100000]. The default value is 12.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.depth",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Variance",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a decision tree stopping criterion. If the variance within any nodedips below this value, the algorithm stops looking for splits in the branch. The default value is 0.",
      "description": "Specifies a decision tree stopping criterion. If the variance within any nodedips below this value, the algorithm stops looking for splits in the branch. The default value is 0.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "variance",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "defaultValue": 1,
      "lowerBound": 1,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the seed to use to create a random number. The seed must be a positive BIGINT value.",
      "description": "Specifies the seed to use to create a random number. The seed must be a positive BIGINT value.",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SequenceInputBy",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the LIST_VECTOR of column(s) that uniquely identifies each row of the input argument INPUT_ARG_NAME. The argument is used to ensure deterministic results for functions which produce results that vary from run to run.",
      "description": "Specifies the input column(s) that uniquely identify each row of input table. The format is 'input1:c1' where input1 refers to the alias used by the input table that contains such column named c1.",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "sequence.column",
      "useInR": true,
      "rOrderNum": 50
    }
  ]
}
